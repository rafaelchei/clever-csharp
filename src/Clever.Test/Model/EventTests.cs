/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Clever.Api;
using Clever.Model;
using Clever.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Clever.Test
{
    /// <summary>
    ///  Class for testing Event
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class EventTests
    {
        // TODO uncomment below to declare an instance variable for Event
        //private Event instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of Event
            //instance = new Event();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Event
        /// </summary>
        [Test]
        public void EventInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" Event
            //Assert.IsInstanceOfType<Event> (instance, "variable 'instance' is a Event");
        }

        /// <summary>
        /// Test deserialize a DistrictsUpdated from type Event
        /// </summary>
        [Test]
        public void DistrictsUpdatedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a DistrictsUpdated from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new DistrictsUpdated().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TermsCreated from type Event
        /// </summary>
        [Test]
        public void TermsCreatedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a TermsCreated from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new TermsCreated().ToJson()));
        }
        /// <summary>
        /// Test deserialize a DistrictsDeleted from type Event
        /// </summary>
        [Test]
        public void DistrictsDeletedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a DistrictsDeleted from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new DistrictsDeleted().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TermsDeleted from type Event
        /// </summary>
        [Test]
        public void TermsDeletedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a TermsDeleted from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new TermsDeleted().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TermsUpdated from type Event
        /// </summary>
        [Test]
        public void TermsUpdatedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a TermsUpdated from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new TermsUpdated().ToJson()));
        }
        /// <summary>
        /// Test deserialize a DistrictsCreated from type Event
        /// </summary>
        [Test]
        public void DistrictsCreatedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a DistrictsCreated from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new DistrictsCreated().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ResourcesDeleted from type Event
        /// </summary>
        [Test]
        public void ResourcesDeletedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a ResourcesDeleted from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new ResourcesDeleted().ToJson()));
        }
        /// <summary>
        /// Test deserialize a UsersUpdated from type Event
        /// </summary>
        [Test]
        public void UsersUpdatedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a UsersUpdated from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new UsersUpdated().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SectionsCreated from type Event
        /// </summary>
        [Test]
        public void SectionsCreatedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a SectionsCreated from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new SectionsCreated().ToJson()));
        }
        /// <summary>
        /// Test deserialize a UsersCreated from type Event
        /// </summary>
        [Test]
        public void UsersCreatedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a UsersCreated from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new UsersCreated().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CoursesCreated from type Event
        /// </summary>
        [Test]
        public void CoursesCreatedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a CoursesCreated from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new CoursesCreated().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SchoolsCreated from type Event
        /// </summary>
        [Test]
        public void SchoolsCreatedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a SchoolsCreated from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new SchoolsCreated().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CoursesDeleted from type Event
        /// </summary>
        [Test]
        public void CoursesDeletedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a CoursesDeleted from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new CoursesDeleted().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CoursesUpdated from type Event
        /// </summary>
        [Test]
        public void CoursesUpdatedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a CoursesUpdated from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new CoursesUpdated().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SectionsDeleted from type Event
        /// </summary>
        [Test]
        public void SectionsDeletedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a SectionsDeleted from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new SectionsDeleted().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SectionsUpdated from type Event
        /// </summary>
        [Test]
        public void SectionsUpdatedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a SectionsUpdated from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new SectionsUpdated().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SchoolsDeleted from type Event
        /// </summary>
        [Test]
        public void SchoolsDeletedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a SchoolsDeleted from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new SchoolsDeleted().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SchoolsUpdated from type Event
        /// </summary>
        [Test]
        public void SchoolsUpdatedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a SchoolsUpdated from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new SchoolsUpdated().ToJson()));
        }
        /// <summary>
        /// Test deserialize a UsersDeleted from type Event
        /// </summary>
        [Test]
        public void UsersDeletedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a UsersDeleted from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new UsersDeleted().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ResourcesUpdated from type Event
        /// </summary>
        [Test]
        public void ResourcesUpdatedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a ResourcesUpdated from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new ResourcesUpdated().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ResourcesCreated from type Event
        /// </summary>
        [Test]
        public void ResourcesCreatedDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a ResourcesCreated from type Event
            //Assert.IsInstanceOf<Event>(JsonConvert.DeserializeObject<Event>(new ResourcesCreated().ToJson()));
        }

        /// <summary>
        /// Test the property 'Created'
        /// </summary>
        [Test]
        public void CreatedTest()
        {
            // TODO unit test for the property 'Created'
        }
        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Test]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Test]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }

    }

}
