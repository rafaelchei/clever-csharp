/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Clever.Client;
using Clever.Api;
using Clever.Model;

namespace Clever.Test
{
    /// <summary>
    ///  Class for testing DataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DataApiTests
    {
        private DataApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DataApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DataApi
            //Assert.IsInstanceOfType(typeof(DataApi), instance, "instance is a DataApi");
        }

        
        /// <summary>
        /// Test GetContactsForUser
        /// </summary>
        [Test]
        public void GetContactsForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetContactsForUser(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<UsersResponse> (response, "response is UsersResponse");
        }
        
        /// <summary>
        /// Test GetCourse
        /// </summary>
        [Test]
        public void GetCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetCourse(id);
            //Assert.IsInstanceOf<CourseResponse> (response, "response is CourseResponse");
        }
        
        /// <summary>
        /// Test GetCourseForSection
        /// </summary>
        [Test]
        public void GetCourseForSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetCourseForSection(id);
            //Assert.IsInstanceOf<CourseResponse> (response, "response is CourseResponse");
        }
        
        /// <summary>
        /// Test GetCourses
        /// </summary>
        [Test]
        public void GetCoursesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //string count = null;
            //var response = instance.GetCourses(limit, startingAfter, endingBefore, count);
            //Assert.IsInstanceOf<CoursesResponse> (response, "response is CoursesResponse");
        }
        
        /// <summary>
        /// Test GetCoursesForResource
        /// </summary>
        [Test]
        public void GetCoursesForResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetCoursesForResource(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<CoursesResponse> (response, "response is CoursesResponse");
        }
        
        /// <summary>
        /// Test GetCoursesForSchool
        /// </summary>
        [Test]
        public void GetCoursesForSchoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetCoursesForSchool(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<CoursesResponse> (response, "response is CoursesResponse");
        }
        
        /// <summary>
        /// Test GetDistrict
        /// </summary>
        [Test]
        public void GetDistrictTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDistrict(id);
            //Assert.IsInstanceOf<DistrictResponse> (response, "response is DistrictResponse");
        }
        
        /// <summary>
        /// Test GetDistrictForCourse
        /// </summary>
        [Test]
        public void GetDistrictForCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDistrictForCourse(id);
            //Assert.IsInstanceOf<DistrictResponse> (response, "response is DistrictResponse");
        }
        
        /// <summary>
        /// Test GetDistrictForSchool
        /// </summary>
        [Test]
        public void GetDistrictForSchoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDistrictForSchool(id);
            //Assert.IsInstanceOf<DistrictResponse> (response, "response is DistrictResponse");
        }
        
        /// <summary>
        /// Test GetDistrictForSection
        /// </summary>
        [Test]
        public void GetDistrictForSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDistrictForSection(id);
            //Assert.IsInstanceOf<DistrictResponse> (response, "response is DistrictResponse");
        }
        
        /// <summary>
        /// Test GetDistrictForTerm
        /// </summary>
        [Test]
        public void GetDistrictForTermTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDistrictForTerm(id);
            //Assert.IsInstanceOf<DistrictResponse> (response, "response is DistrictResponse");
        }
        
        /// <summary>
        /// Test GetDistrictForUser
        /// </summary>
        [Test]
        public void GetDistrictForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDistrictForUser(id);
            //Assert.IsInstanceOf<DistrictResponse> (response, "response is DistrictResponse");
        }
        
        /// <summary>
        /// Test GetDistricts
        /// </summary>
        [Test]
        public void GetDistrictsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string count = null;
            //var response = instance.GetDistricts(count);
            //Assert.IsInstanceOf<DistrictsResponse> (response, "response is DistrictsResponse");
        }
        
        /// <summary>
        /// Test GetResource
        /// </summary>
        [Test]
        public void GetResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetResource(id);
            //Assert.IsInstanceOf<ResourceResponse> (response, "response is ResourceResponse");
        }
        
        /// <summary>
        /// Test GetResources
        /// </summary>
        [Test]
        public void GetResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetResources(limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<ResourcesResponse> (response, "response is ResourcesResponse");
        }
        
        /// <summary>
        /// Test GetResourcesForCourse
        /// </summary>
        [Test]
        public void GetResourcesForCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetResourcesForCourse(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<ResourcesResponse> (response, "response is ResourcesResponse");
        }
        
        /// <summary>
        /// Test GetResourcesForSection
        /// </summary>
        [Test]
        public void GetResourcesForSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetResourcesForSection(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<ResourcesResponse> (response, "response is ResourcesResponse");
        }
        
        /// <summary>
        /// Test GetResourcesForUser
        /// </summary>
        [Test]
        public void GetResourcesForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetResourcesForUser(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<ResourcesResponse> (response, "response is ResourcesResponse");
        }
        
        /// <summary>
        /// Test GetSchool
        /// </summary>
        [Test]
        public void GetSchoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetSchool(id);
            //Assert.IsInstanceOf<SchoolResponse> (response, "response is SchoolResponse");
        }
        
        /// <summary>
        /// Test GetSchoolForSection
        /// </summary>
        [Test]
        public void GetSchoolForSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetSchoolForSection(id);
            //Assert.IsInstanceOf<SchoolResponse> (response, "response is SchoolResponse");
        }
        
        /// <summary>
        /// Test GetSchools
        /// </summary>
        [Test]
        public void GetSchoolsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //string count = null;
            //var response = instance.GetSchools(limit, startingAfter, endingBefore, count);
            //Assert.IsInstanceOf<SchoolsResponse> (response, "response is SchoolsResponse");
        }
        
        /// <summary>
        /// Test GetSchoolsForCourse
        /// </summary>
        [Test]
        public void GetSchoolsForCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetSchoolsForCourse(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<SchoolsResponse> (response, "response is SchoolsResponse");
        }
        
        /// <summary>
        /// Test GetSchoolsForTerm
        /// </summary>
        [Test]
        public void GetSchoolsForTermTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetSchoolsForTerm(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<SchoolsResponse> (response, "response is SchoolsResponse");
        }
        
        /// <summary>
        /// Test GetSchoolsForUser
        /// </summary>
        [Test]
        public void GetSchoolsForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string primary = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetSchoolsForUser(id, primary, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<SchoolsResponse> (response, "response is SchoolsResponse");
        }
        
        /// <summary>
        /// Test GetSection
        /// </summary>
        [Test]
        public void GetSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetSection(id);
            //Assert.IsInstanceOf<SectionResponse> (response, "response is SectionResponse");
        }
        
        /// <summary>
        /// Test GetSections
        /// </summary>
        [Test]
        public void GetSectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //string count = null;
            //var response = instance.GetSections(limit, startingAfter, endingBefore, count);
            //Assert.IsInstanceOf<SectionsResponse> (response, "response is SectionsResponse");
        }
        
        /// <summary>
        /// Test GetSectionsForCourse
        /// </summary>
        [Test]
        public void GetSectionsForCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetSectionsForCourse(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<SectionsResponse> (response, "response is SectionsResponse");
        }
        
        /// <summary>
        /// Test GetSectionsForResource
        /// </summary>
        [Test]
        public void GetSectionsForResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetSectionsForResource(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<SectionsResponse> (response, "response is SectionsResponse");
        }
        
        /// <summary>
        /// Test GetSectionsForSchool
        /// </summary>
        [Test]
        public void GetSectionsForSchoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetSectionsForSchool(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<SectionsResponse> (response, "response is SectionsResponse");
        }
        
        /// <summary>
        /// Test GetSectionsForTerm
        /// </summary>
        [Test]
        public void GetSectionsForTermTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetSectionsForTerm(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<SectionsResponse> (response, "response is SectionsResponse");
        }
        
        /// <summary>
        /// Test GetSectionsForUser
        /// </summary>
        [Test]
        public void GetSectionsForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetSectionsForUser(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<SectionsResponse> (response, "response is SectionsResponse");
        }
        
        /// <summary>
        /// Test GetStudentsForUser
        /// </summary>
        [Test]
        public void GetStudentsForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetStudentsForUser(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<UsersResponse> (response, "response is UsersResponse");
        }
        
        /// <summary>
        /// Test GetTeachersForUser
        /// </summary>
        [Test]
        public void GetTeachersForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetTeachersForUser(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<UsersResponse> (response, "response is UsersResponse");
        }
        
        /// <summary>
        /// Test GetTerm
        /// </summary>
        [Test]
        public void GetTermTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetTerm(id);
            //Assert.IsInstanceOf<TermResponse> (response, "response is TermResponse");
        }
        
        /// <summary>
        /// Test GetTermForSection
        /// </summary>
        [Test]
        public void GetTermForSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetTermForSection(id);
            //Assert.IsInstanceOf<TermResponse> (response, "response is TermResponse");
        }
        
        /// <summary>
        /// Test GetTerms
        /// </summary>
        [Test]
        public void GetTermsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //string count = null;
            //var response = instance.GetTerms(limit, startingAfter, endingBefore, count);
            //Assert.IsInstanceOf<TermsResponse> (response, "response is TermsResponse");
        }
        
        /// <summary>
        /// Test GetTermsForSchool
        /// </summary>
        [Test]
        public void GetTermsForSchoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetTermsForSchool(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<TermsResponse> (response, "response is TermsResponse");
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetUser(id);
            //Assert.IsInstanceOf<UserResponse> (response, "response is UserResponse");
        }
        
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string role = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //string count = null;
            //var response = instance.GetUsers(limit, role, startingAfter, endingBefore, count);
            //Assert.IsInstanceOf<UsersResponse> (response, "response is UsersResponse");
        }
        
        /// <summary>
        /// Test GetUsersForResource
        /// </summary>
        [Test]
        public void GetUsersForResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string role = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetUsersForResource(id, role, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<UsersResponse> (response, "response is UsersResponse");
        }
        
        /// <summary>
        /// Test GetUsersForSchool
        /// </summary>
        [Test]
        public void GetUsersForSchoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string role = null;
            //string primary = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetUsersForSchool(id, role, primary, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<UsersResponse> (response, "response is UsersResponse");
        }
        
        /// <summary>
        /// Test GetUsersForSection
        /// </summary>
        [Test]
        public void GetUsersForSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string role = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetUsersForSection(id, role, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<UsersResponse> (response, "response is UsersResponse");
        }
        
    }

}
