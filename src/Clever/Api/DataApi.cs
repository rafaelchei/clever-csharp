/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Clever.Client;
using Clever.Model;

namespace Clever.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contact users for a student user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>UsersResponse</returns>
        UsersResponse GetContactsForUser (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contact users for a student user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        ApiResponse<UsersResponse> GetContactsForUserWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CourseResponse</returns>
        CourseResponse GetCourse (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CourseResponse</returns>
        ApiResponse<CourseResponse> GetCourseWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the course for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CourseResponse</returns>
        CourseResponse GetCourseForSection (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the course for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CourseResponse</returns>
        ApiResponse<CourseResponse> GetCourseForSectionWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of courses
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>CoursesResponse</returns>
        CoursesResponse GetCourses (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of courses
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of CoursesResponse</returns>
        ApiResponse<CoursesResponse> GetCoursesWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the courses for a resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>CoursesResponse</returns>
        CoursesResponse GetCoursesForResource (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the courses for a resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of CoursesResponse</returns>
        ApiResponse<CoursesResponse> GetCoursesForResourceWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the courses for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>CoursesResponse</returns>
        CoursesResponse GetCoursesForSchool (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the courses for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of CoursesResponse</returns>
        ApiResponse<CoursesResponse> GetCoursesForSchoolWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific district
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        DistrictResponse GetDistrict (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific district
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        ApiResponse<DistrictResponse> GetDistrictWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        DistrictResponse GetDistrictForCourse (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        ApiResponse<DistrictResponse> GetDistrictForCourseWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        DistrictResponse GetDistrictForSchool (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        ApiResponse<DistrictResponse> GetDistrictForSchoolWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        DistrictResponse GetDistrictForSection (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        ApiResponse<DistrictResponse> GetDistrictForSectionWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        DistrictResponse GetDistrictForTerm (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        ApiResponse<DistrictResponse> GetDistrictForTermWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        DistrictResponse GetDistrictForUser (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        ApiResponse<DistrictResponse> GetDistrictForUserWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of districts. In practice this will only return the one district associated with the bearer token
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <returns>DistrictsResponse</returns>
        DistrictsResponse GetDistricts (string count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of districts. In practice this will only return the one district associated with the bearer token
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of DistrictsResponse</returns>
        ApiResponse<DistrictsResponse> GetDistrictsWithHttpInfo (string count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceResponse</returns>
        ResourceResponse GetResource (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceResponse</returns>
        ApiResponse<ResourceResponse> GetResourceWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of resources
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ResourcesResponse</returns>
        ResourcesResponse GetResources (int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of resources
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of ResourcesResponse</returns>
        ApiResponse<ResourcesResponse> GetResourcesWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ResourcesResponse</returns>
        ResourcesResponse GetResourcesForCourse (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of ResourcesResponse</returns>
        ApiResponse<ResourcesResponse> GetResourcesForCourseWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ResourcesResponse</returns>
        ResourcesResponse GetResourcesForSection (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of ResourcesResponse</returns>
        ApiResponse<ResourcesResponse> GetResourcesForSectionWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ResourcesResponse</returns>
        ResourcesResponse GetResourcesForUser (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of ResourcesResponse</returns>
        ApiResponse<ResourcesResponse> GetResourcesForUserWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SchoolResponse</returns>
        SchoolResponse GetSchool (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SchoolResponse</returns>
        ApiResponse<SchoolResponse> GetSchoolWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the school for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SchoolResponse</returns>
        SchoolResponse GetSchoolForSection (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the school for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SchoolResponse</returns>
        ApiResponse<SchoolResponse> GetSchoolForSectionWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of schools
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>SchoolsResponse</returns>
        SchoolsResponse GetSchools (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of schools
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of SchoolsResponse</returns>
        ApiResponse<SchoolsResponse> GetSchoolsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SchoolsResponse</returns>
        SchoolsResponse GetSchoolsForCourse (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SchoolsResponse</returns>
        ApiResponse<SchoolsResponse> GetSchoolsForCourseWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SchoolsResponse</returns>
        SchoolsResponse GetSchoolsForTerm (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SchoolsResponse</returns>
        ApiResponse<SchoolsResponse> GetSchoolsForTermWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SchoolsResponse</returns>
        SchoolsResponse GetSchoolsForUser (string id, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SchoolsResponse</returns>
        ApiResponse<SchoolsResponse> GetSchoolsForUserWithHttpInfo (string id, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SectionResponse</returns>
        SectionResponse GetSection (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SectionResponse</returns>
        ApiResponse<SectionResponse> GetSectionWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of sections
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        SectionsResponse GetSections (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of sections
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        ApiResponse<SectionsResponse> GetSectionsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        SectionsResponse GetSectionsForCourse (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        ApiResponse<SectionsResponse> GetSectionsForCourseWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        SectionsResponse GetSectionsForResource (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        ApiResponse<SectionsResponse> GetSectionsForResourceWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        SectionsResponse GetSectionsForSchool (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        ApiResponse<SectionsResponse> GetSectionsForSchoolWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        SectionsResponse GetSectionsForTerm (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        ApiResponse<SectionsResponse> GetSectionsForTermWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        SectionsResponse GetSectionsForUser (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        ApiResponse<SectionsResponse> GetSectionsForUserWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student users for a teacher or contact user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>UsersResponse</returns>
        UsersResponse GetStudentsForUser (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student users for a teacher or contact user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        ApiResponse<UsersResponse> GetStudentsForUserWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teacher users for a student user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>UsersResponse</returns>
        UsersResponse GetTeachersForUser (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teacher users for a student user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        ApiResponse<UsersResponse> GetTeachersForUserWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TermResponse</returns>
        TermResponse GetTerm (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TermResponse</returns>
        ApiResponse<TermResponse> GetTermWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the term for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TermResponse</returns>
        TermResponse GetTermForSection (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the term for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TermResponse</returns>
        ApiResponse<TermResponse> GetTermForSectionWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of terms
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>TermsResponse</returns>
        TermsResponse GetTerms (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of terms
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of TermsResponse</returns>
        ApiResponse<TermsResponse> GetTermsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the terms for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>TermsResponse</returns>
        TermsResponse GetTermsForSchool (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the terms for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of TermsResponse</returns>
        ApiResponse<TermsResponse> GetTermsForSchoolWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserResponse</returns>
        UserResponse GetUser (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserResponse</returns>
        ApiResponse<UserResponse> GetUserWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of contact, district admin, staff, student, and/or teacher users
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="role"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>UsersResponse</returns>
        UsersResponse GetUsers (int? limit = null, string role = null, string startingAfter = null, string endingBefore = null, string count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of contact, district admin, staff, student, and/or teacher users
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="role"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        ApiResponse<UsersResponse> GetUsersWithHttpInfo (int? limit = null, string role = null, string startingAfter = null, string endingBefore = null, string count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student and/or teacher users for a resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>UsersResponse</returns>
        UsersResponse GetUsersForResource (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student and/or teacher users for a resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        ApiResponse<UsersResponse> GetUsersForResourceWithHttpInfo (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the staff, student, and/or teacher users for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>UsersResponse</returns>
        UsersResponse GetUsersForSchool (string id, string role = null, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the staff, student, and/or teacher users for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        ApiResponse<UsersResponse> GetUsersForSchoolWithHttpInfo (string id, string role = null, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student and/or teacher users for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>UsersResponse</returns>
        UsersResponse GetUsersForSection (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student and/or teacher users for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        ApiResponse<UsersResponse> GetUsersForSectionWithHttpInfo (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contact users for a student user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        System.Threading.Tasks.Task<UsersResponse> GetContactsForUserAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contact users for a student user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersResponse>> GetContactsForUserAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CourseResponse</returns>
        System.Threading.Tasks.Task<CourseResponse> GetCourseAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CourseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CourseResponse>> GetCourseAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the course for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CourseResponse</returns>
        System.Threading.Tasks.Task<CourseResponse> GetCourseForSectionAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the course for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CourseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CourseResponse>> GetCourseForSectionAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of courses
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of CoursesResponse</returns>
        System.Threading.Tasks.Task<CoursesResponse> GetCoursesAsync (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of courses
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (CoursesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoursesResponse>> GetCoursesAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the courses for a resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of CoursesResponse</returns>
        System.Threading.Tasks.Task<CoursesResponse> GetCoursesForResourceAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the courses for a resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (CoursesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoursesResponse>> GetCoursesForResourceAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the courses for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of CoursesResponse</returns>
        System.Threading.Tasks.Task<CoursesResponse> GetCoursesForSchoolAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the courses for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (CoursesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoursesResponse>> GetCoursesForSchoolAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific district
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        System.Threading.Tasks.Task<DistrictResponse> GetDistrictAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific district
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        System.Threading.Tasks.Task<DistrictResponse> GetDistrictForCourseAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForCourseAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        System.Threading.Tasks.Task<DistrictResponse> GetDistrictForSchoolAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForSchoolAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        System.Threading.Tasks.Task<DistrictResponse> GetDistrictForSectionAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForSectionAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        System.Threading.Tasks.Task<DistrictResponse> GetDistrictForTermAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForTermAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        System.Threading.Tasks.Task<DistrictResponse> GetDistrictForUserAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForUserAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of districts. In practice this will only return the one district associated with the bearer token
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of DistrictsResponse</returns>
        System.Threading.Tasks.Task<DistrictsResponse> GetDistrictsAsync (string count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of districts. In practice this will only return the one district associated with the bearer token
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (DistrictsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictsResponse>> GetDistrictsAsyncWithHttpInfo (string count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceResponse</returns>
        System.Threading.Tasks.Task<ResourceResponse> GetResourceAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceResponse>> GetResourceAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of resources
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ResourcesResponse</returns>
        System.Threading.Tasks.Task<ResourcesResponse> GetResourcesAsync (int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of resources
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourcesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourcesResponse>> GetResourcesAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ResourcesResponse</returns>
        System.Threading.Tasks.Task<ResourcesResponse> GetResourcesForCourseAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourcesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourcesResponse>> GetResourcesForCourseAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ResourcesResponse</returns>
        System.Threading.Tasks.Task<ResourcesResponse> GetResourcesForSectionAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourcesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourcesResponse>> GetResourcesForSectionAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ResourcesResponse</returns>
        System.Threading.Tasks.Task<ResourcesResponse> GetResourcesForUserAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the resources for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourcesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourcesResponse>> GetResourcesForUserAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SchoolResponse</returns>
        System.Threading.Tasks.Task<SchoolResponse> GetSchoolAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SchoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolResponse>> GetSchoolAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the school for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SchoolResponse</returns>
        System.Threading.Tasks.Task<SchoolResponse> GetSchoolForSectionAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the school for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SchoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolResponse>> GetSchoolForSectionAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of schools
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of SchoolsResponse</returns>
        System.Threading.Tasks.Task<SchoolsResponse> GetSchoolsAsync (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of schools
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (SchoolsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolsResponse>> GetSchoolsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SchoolsResponse</returns>
        System.Threading.Tasks.Task<SchoolsResponse> GetSchoolsForCourseAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SchoolsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolsResponse>> GetSchoolsForCourseAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SchoolsResponse</returns>
        System.Threading.Tasks.Task<SchoolsResponse> GetSchoolsForTermAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SchoolsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolsResponse>> GetSchoolsForTermAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SchoolsResponse</returns>
        System.Threading.Tasks.Task<SchoolsResponse> GetSchoolsForUserAsync (string id, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SchoolsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolsResponse>> GetSchoolsForUserAsyncWithHttpInfo (string id, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SectionResponse</returns>
        System.Threading.Tasks.Task<SectionResponse> GetSectionAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SectionResponse>> GetSectionAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of sections
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        System.Threading.Tasks.Task<SectionsResponse> GetSectionsAsync (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of sections
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        System.Threading.Tasks.Task<SectionsResponse> GetSectionsForCourseAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a course
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForCourseAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        System.Threading.Tasks.Task<SectionsResponse> GetSectionsForResourceAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForResourceAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        System.Threading.Tasks.Task<SectionsResponse> GetSectionsForSchoolAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForSchoolAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        System.Threading.Tasks.Task<SectionsResponse> GetSectionsForTermAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForTermAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        System.Threading.Tasks.Task<SectionsResponse> GetSectionsForUserAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForUserAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student users for a teacher or contact user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        System.Threading.Tasks.Task<UsersResponse> GetStudentsForUserAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student users for a teacher or contact user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersResponse>> GetStudentsForUserAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teacher users for a student user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        System.Threading.Tasks.Task<UsersResponse> GetTeachersForUserAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teacher users for a student user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersResponse>> GetTeachersForUserAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of TermResponse</returns>
        System.Threading.Tasks.Task<TermResponse> GetTermAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific term
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (TermResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TermResponse>> GetTermAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the term for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of TermResponse</returns>
        System.Threading.Tasks.Task<TermResponse> GetTermForSectionAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the term for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (TermResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TermResponse>> GetTermForSectionAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of terms
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of TermsResponse</returns>
        System.Threading.Tasks.Task<TermsResponse> GetTermsAsync (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of terms
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (TermsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TermsResponse>> GetTermsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the terms for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of TermsResponse</returns>
        System.Threading.Tasks.Task<TermsResponse> GetTermsForSchoolAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the terms for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (TermsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TermsResponse>> GetTermsForSchoolAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserResponse</returns>
        System.Threading.Tasks.Task<UserResponse> GetUserAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific user
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResponse>> GetUserAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of contact, district admin, staff, student, and/or teacher users
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="role"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        System.Threading.Tasks.Task<UsersResponse> GetUsersAsync (int? limit = null, string role = null, string startingAfter = null, string endingBefore = null, string count = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of contact, district admin, staff, student, and/or teacher users
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="role"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersResponse>> GetUsersAsyncWithHttpInfo (int? limit = null, string role = null, string startingAfter = null, string endingBefore = null, string count = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student and/or teacher users for a resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        System.Threading.Tasks.Task<UsersResponse> GetUsersForResourceAsync (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student and/or teacher users for a resource
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersResponse>> GetUsersForResourceAsyncWithHttpInfo (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the staff, student, and/or teacher users for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        System.Threading.Tasks.Task<UsersResponse> GetUsersForSchoolAsync (string id, string role = null, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the staff, student, and/or teacher users for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersResponse>> GetUsersForSchoolAsyncWithHttpInfo (string id, string role = null, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student and/or teacher users for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        System.Threading.Tasks.Task<UsersResponse> GetUsersForSectionAsync (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student and/or teacher users for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersResponse>> GetUsersForSectionAsyncWithHttpInfo (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataApi : IDataApi
    {
        private Clever.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataApi(String basePath)
        {
            this.Configuration = new Clever.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Clever.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataApi(Clever.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Clever.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Clever.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Clever.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Clever.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns the contact users for a student user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>UsersResponse</returns>
        public UsersResponse GetContactsForUser (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<UsersResponse> localVarResponse = GetContactsForUserWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the contact users for a student user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        public ApiResponse< UsersResponse > GetContactsForUserWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetContactsForUser");

            var localVarPath = "/users/{id}/mycontacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
        }

        /// <summary>
        ///  Returns the contact users for a student user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        public async System.Threading.Tasks.Task<UsersResponse> GetContactsForUserAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<UsersResponse> localVarResponse = await GetContactsForUserAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the contact users for a student user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersResponse>> GetContactsForUserAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetContactsForUser");

            var localVarPath = "/users/{id}/mycontacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
        }

        /// <summary>
        ///  Returns a specific course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CourseResponse</returns>
        public CourseResponse GetCourse (string id)
        {
             ApiResponse<CourseResponse> localVarResponse = GetCourseWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CourseResponse</returns>
        public ApiResponse< CourseResponse > GetCourseWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetCourse");

            var localVarPath = "/courses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseResponse)));
        }

        /// <summary>
        ///  Returns a specific course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CourseResponse</returns>
        public async System.Threading.Tasks.Task<CourseResponse> GetCourseAsync (string id)
        {
             ApiResponse<CourseResponse> localVarResponse = await GetCourseAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CourseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CourseResponse>> GetCourseAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetCourse");

            var localVarPath = "/courses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseResponse)));
        }

        /// <summary>
        ///  Returns the course for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CourseResponse</returns>
        public CourseResponse GetCourseForSection (string id)
        {
             ApiResponse<CourseResponse> localVarResponse = GetCourseForSectionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the course for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CourseResponse</returns>
        public ApiResponse< CourseResponse > GetCourseForSectionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetCourseForSection");

            var localVarPath = "/sections/{id}/course";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseResponse)));
        }

        /// <summary>
        ///  Returns the course for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CourseResponse</returns>
        public async System.Threading.Tasks.Task<CourseResponse> GetCourseForSectionAsync (string id)
        {
             ApiResponse<CourseResponse> localVarResponse = await GetCourseForSectionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the course for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CourseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CourseResponse>> GetCourseForSectionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetCourseForSection");

            var localVarPath = "/sections/{id}/course";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseResponse)));
        }

        /// <summary>
        ///  Returns a list of courses
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>CoursesResponse</returns>
        public CoursesResponse GetCourses (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {
             ApiResponse<CoursesResponse> localVarResponse = GetCoursesWithHttpInfo(limit, startingAfter, endingBefore, count);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of courses
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of CoursesResponse</returns>
        public ApiResponse< CoursesResponse > GetCoursesWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {

            var localVarPath = "/courses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CoursesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CoursesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CoursesResponse)));
        }

        /// <summary>
        ///  Returns a list of courses
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of CoursesResponse</returns>
        public async System.Threading.Tasks.Task<CoursesResponse> GetCoursesAsync (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {
             ApiResponse<CoursesResponse> localVarResponse = await GetCoursesAsyncWithHttpInfo(limit, startingAfter, endingBefore, count);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of courses
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (CoursesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CoursesResponse>> GetCoursesAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {

            var localVarPath = "/courses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CoursesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CoursesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CoursesResponse)));
        }

        /// <summary>
        ///  Returns the courses for a resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>CoursesResponse</returns>
        public CoursesResponse GetCoursesForResource (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<CoursesResponse> localVarResponse = GetCoursesForResourceWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the courses for a resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of CoursesResponse</returns>
        public ApiResponse< CoursesResponse > GetCoursesForResourceWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetCoursesForResource");

            var localVarPath = "/resources/{id}/courses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCoursesForResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CoursesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CoursesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CoursesResponse)));
        }

        /// <summary>
        ///  Returns the courses for a resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of CoursesResponse</returns>
        public async System.Threading.Tasks.Task<CoursesResponse> GetCoursesForResourceAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<CoursesResponse> localVarResponse = await GetCoursesForResourceAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the courses for a resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (CoursesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CoursesResponse>> GetCoursesForResourceAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetCoursesForResource");

            var localVarPath = "/resources/{id}/courses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCoursesForResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CoursesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CoursesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CoursesResponse)));
        }

        /// <summary>
        ///  Returns the courses for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>CoursesResponse</returns>
        public CoursesResponse GetCoursesForSchool (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<CoursesResponse> localVarResponse = GetCoursesForSchoolWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the courses for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of CoursesResponse</returns>
        public ApiResponse< CoursesResponse > GetCoursesForSchoolWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetCoursesForSchool");

            var localVarPath = "/schools/{id}/courses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCoursesForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CoursesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CoursesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CoursesResponse)));
        }

        /// <summary>
        ///  Returns the courses for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of CoursesResponse</returns>
        public async System.Threading.Tasks.Task<CoursesResponse> GetCoursesForSchoolAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<CoursesResponse> localVarResponse = await GetCoursesForSchoolAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the courses for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (CoursesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CoursesResponse>> GetCoursesForSchoolAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetCoursesForSchool");

            var localVarPath = "/schools/{id}/courses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCoursesForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CoursesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CoursesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CoursesResponse)));
        }

        /// <summary>
        ///  Returns a specific district
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        public DistrictResponse GetDistrict (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = GetDistrictWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific district
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        public ApiResponse< DistrictResponse > GetDistrictWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrict");

            var localVarPath = "/districts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrict", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns a specific district
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        public async System.Threading.Tasks.Task<DistrictResponse> GetDistrictAsync (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = await GetDistrictAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific district
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrict");

            var localVarPath = "/districts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrict", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        public DistrictResponse GetDistrictForCourse (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = GetDistrictForCourseWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the district for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        public ApiResponse< DistrictResponse > GetDistrictForCourseWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForCourse");

            var localVarPath = "/courses/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        public async System.Threading.Tasks.Task<DistrictResponse> GetDistrictForCourseAsync (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = await GetDistrictForCourseAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the district for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForCourseAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForCourse");

            var localVarPath = "/courses/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        public DistrictResponse GetDistrictForSchool (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = GetDistrictForSchoolWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the district for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        public ApiResponse< DistrictResponse > GetDistrictForSchoolWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForSchool");

            var localVarPath = "/schools/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        public async System.Threading.Tasks.Task<DistrictResponse> GetDistrictForSchoolAsync (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = await GetDistrictForSchoolAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the district for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForSchoolAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForSchool");

            var localVarPath = "/schools/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        public DistrictResponse GetDistrictForSection (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = GetDistrictForSectionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the district for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        public ApiResponse< DistrictResponse > GetDistrictForSectionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForSection");

            var localVarPath = "/sections/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        public async System.Threading.Tasks.Task<DistrictResponse> GetDistrictForSectionAsync (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = await GetDistrictForSectionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the district for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForSectionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForSection");

            var localVarPath = "/sections/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        public DistrictResponse GetDistrictForTerm (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = GetDistrictForTermWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the district for a term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        public ApiResponse< DistrictResponse > GetDistrictForTermWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForTerm");

            var localVarPath = "/terms/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForTerm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        public async System.Threading.Tasks.Task<DistrictResponse> GetDistrictForTermAsync (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = await GetDistrictForTermAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the district for a term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForTermAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForTerm");

            var localVarPath = "/terms/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForTerm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        public DistrictResponse GetDistrictForUser (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = GetDistrictForUserWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the district for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        public ApiResponse< DistrictResponse > GetDistrictForUserWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForUser");

            var localVarPath = "/users/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        public async System.Threading.Tasks.Task<DistrictResponse> GetDistrictForUserAsync (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = await GetDistrictForUserAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the district for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForUserAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForUser");

            var localVarPath = "/users/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns a list of districts. In practice this will only return the one district associated with the bearer token
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <returns>DistrictsResponse</returns>
        public DistrictsResponse GetDistricts (string count = null)
        {
             ApiResponse<DistrictsResponse> localVarResponse = GetDistrictsWithHttpInfo(count);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of districts. In practice this will only return the one district associated with the bearer token
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of DistrictsResponse</returns>
        public ApiResponse< DistrictsResponse > GetDistrictsWithHttpInfo (string count = null)
        {

            var localVarPath = "/districts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistricts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictsResponse)));
        }

        /// <summary>
        ///  Returns a list of districts. In practice this will only return the one district associated with the bearer token
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of DistrictsResponse</returns>
        public async System.Threading.Tasks.Task<DistrictsResponse> GetDistrictsAsync (string count = null)
        {
             ApiResponse<DistrictsResponse> localVarResponse = await GetDistrictsAsyncWithHttpInfo(count);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of districts. In practice this will only return the one district associated with the bearer token
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (DistrictsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictsResponse>> GetDistrictsAsyncWithHttpInfo (string count = null)
        {

            var localVarPath = "/districts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistricts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictsResponse)));
        }

        /// <summary>
        ///  Returns a specific resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceResponse</returns>
        public ResourceResponse GetResource (string id)
        {
             ApiResponse<ResourceResponse> localVarResponse = GetResourceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceResponse</returns>
        public ApiResponse< ResourceResponse > GetResourceWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetResource");

            var localVarPath = "/resources/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceResponse)));
        }

        /// <summary>
        ///  Returns a specific resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceResponse</returns>
        public async System.Threading.Tasks.Task<ResourceResponse> GetResourceAsync (string id)
        {
             ApiResponse<ResourceResponse> localVarResponse = await GetResourceAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceResponse>> GetResourceAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetResource");

            var localVarPath = "/resources/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceResponse)));
        }

        /// <summary>
        ///  Returns a list of resources
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ResourcesResponse</returns>
        public ResourcesResponse GetResources (int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<ResourcesResponse> localVarResponse = GetResourcesWithHttpInfo(limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of resources
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of ResourcesResponse</returns>
        public ApiResponse< ResourcesResponse > GetResourcesWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourcesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourcesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourcesResponse)));
        }

        /// <summary>
        ///  Returns a list of resources
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ResourcesResponse</returns>
        public async System.Threading.Tasks.Task<ResourcesResponse> GetResourcesAsync (int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<ResourcesResponse> localVarResponse = await GetResourcesAsyncWithHttpInfo(limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of resources
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourcesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourcesResponse>> GetResourcesAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourcesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourcesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourcesResponse)));
        }

        /// <summary>
        ///  Returns the resources for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ResourcesResponse</returns>
        public ResourcesResponse GetResourcesForCourse (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<ResourcesResponse> localVarResponse = GetResourcesForCourseWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the resources for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of ResourcesResponse</returns>
        public ApiResponse< ResourcesResponse > GetResourcesForCourseWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetResourcesForCourse");

            var localVarPath = "/courses/{id}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourcesForCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourcesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourcesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourcesResponse)));
        }

        /// <summary>
        ///  Returns the resources for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ResourcesResponse</returns>
        public async System.Threading.Tasks.Task<ResourcesResponse> GetResourcesForCourseAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<ResourcesResponse> localVarResponse = await GetResourcesForCourseAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the resources for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourcesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourcesResponse>> GetResourcesForCourseAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetResourcesForCourse");

            var localVarPath = "/courses/{id}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourcesForCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourcesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourcesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourcesResponse)));
        }

        /// <summary>
        ///  Returns the resources for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ResourcesResponse</returns>
        public ResourcesResponse GetResourcesForSection (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<ResourcesResponse> localVarResponse = GetResourcesForSectionWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the resources for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of ResourcesResponse</returns>
        public ApiResponse< ResourcesResponse > GetResourcesForSectionWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetResourcesForSection");

            var localVarPath = "/sections/{id}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourcesForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourcesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourcesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourcesResponse)));
        }

        /// <summary>
        ///  Returns the resources for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ResourcesResponse</returns>
        public async System.Threading.Tasks.Task<ResourcesResponse> GetResourcesForSectionAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<ResourcesResponse> localVarResponse = await GetResourcesForSectionAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the resources for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourcesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourcesResponse>> GetResourcesForSectionAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetResourcesForSection");

            var localVarPath = "/sections/{id}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourcesForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourcesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourcesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourcesResponse)));
        }

        /// <summary>
        ///  Returns the resources for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ResourcesResponse</returns>
        public ResourcesResponse GetResourcesForUser (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<ResourcesResponse> localVarResponse = GetResourcesForUserWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the resources for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of ResourcesResponse</returns>
        public ApiResponse< ResourcesResponse > GetResourcesForUserWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetResourcesForUser");

            var localVarPath = "/users/{id}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourcesForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourcesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourcesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourcesResponse)));
        }

        /// <summary>
        ///  Returns the resources for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ResourcesResponse</returns>
        public async System.Threading.Tasks.Task<ResourcesResponse> GetResourcesForUserAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<ResourcesResponse> localVarResponse = await GetResourcesForUserAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the resources for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourcesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourcesResponse>> GetResourcesForUserAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetResourcesForUser");

            var localVarPath = "/users/{id}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourcesForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourcesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourcesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourcesResponse)));
        }

        /// <summary>
        ///  Returns a specific school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SchoolResponse</returns>
        public SchoolResponse GetSchool (string id)
        {
             ApiResponse<SchoolResponse> localVarResponse = GetSchoolWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SchoolResponse</returns>
        public ApiResponse< SchoolResponse > GetSchoolWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchool");

            var localVarPath = "/schools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolResponse)));
        }

        /// <summary>
        ///  Returns a specific school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SchoolResponse</returns>
        public async System.Threading.Tasks.Task<SchoolResponse> GetSchoolAsync (string id)
        {
             ApiResponse<SchoolResponse> localVarResponse = await GetSchoolAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SchoolResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolResponse>> GetSchoolAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchool");

            var localVarPath = "/schools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolResponse)));
        }

        /// <summary>
        ///  Returns the school for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SchoolResponse</returns>
        public SchoolResponse GetSchoolForSection (string id)
        {
             ApiResponse<SchoolResponse> localVarResponse = GetSchoolForSectionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the school for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SchoolResponse</returns>
        public ApiResponse< SchoolResponse > GetSchoolForSectionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolForSection");

            var localVarPath = "/sections/{id}/school";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolResponse)));
        }

        /// <summary>
        ///  Returns the school for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SchoolResponse</returns>
        public async System.Threading.Tasks.Task<SchoolResponse> GetSchoolForSectionAsync (string id)
        {
             ApiResponse<SchoolResponse> localVarResponse = await GetSchoolForSectionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the school for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SchoolResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolResponse>> GetSchoolForSectionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolForSection");

            var localVarPath = "/sections/{id}/school";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolResponse)));
        }

        /// <summary>
        ///  Returns a list of schools
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>SchoolsResponse</returns>
        public SchoolsResponse GetSchools (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {
             ApiResponse<SchoolsResponse> localVarResponse = GetSchoolsWithHttpInfo(limit, startingAfter, endingBefore, count);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of schools
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of SchoolsResponse</returns>
        public ApiResponse< SchoolsResponse > GetSchoolsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {

            var localVarPath = "/schools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsResponse)));
        }

        /// <summary>
        ///  Returns a list of schools
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of SchoolsResponse</returns>
        public async System.Threading.Tasks.Task<SchoolsResponse> GetSchoolsAsync (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {
             ApiResponse<SchoolsResponse> localVarResponse = await GetSchoolsAsyncWithHttpInfo(limit, startingAfter, endingBefore, count);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of schools
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (SchoolsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolsResponse>> GetSchoolsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {

            var localVarPath = "/schools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsResponse)));
        }

        /// <summary>
        ///  Returns the schools for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SchoolsResponse</returns>
        public SchoolsResponse GetSchoolsForCourse (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SchoolsResponse> localVarResponse = GetSchoolsForCourseWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the schools for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SchoolsResponse</returns>
        public ApiResponse< SchoolsResponse > GetSchoolsForCourseWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolsForCourse");

            var localVarPath = "/courses/{id}/schools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolsForCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsResponse)));
        }

        /// <summary>
        ///  Returns the schools for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SchoolsResponse</returns>
        public async System.Threading.Tasks.Task<SchoolsResponse> GetSchoolsForCourseAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SchoolsResponse> localVarResponse = await GetSchoolsForCourseAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the schools for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SchoolsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolsResponse>> GetSchoolsForCourseAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolsForCourse");

            var localVarPath = "/courses/{id}/schools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolsForCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsResponse)));
        }

        /// <summary>
        ///  Returns the schools for a term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SchoolsResponse</returns>
        public SchoolsResponse GetSchoolsForTerm (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SchoolsResponse> localVarResponse = GetSchoolsForTermWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the schools for a term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SchoolsResponse</returns>
        public ApiResponse< SchoolsResponse > GetSchoolsForTermWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolsForTerm");

            var localVarPath = "/terms/{id}/schools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolsForTerm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsResponse)));
        }

        /// <summary>
        ///  Returns the schools for a term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SchoolsResponse</returns>
        public async System.Threading.Tasks.Task<SchoolsResponse> GetSchoolsForTermAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SchoolsResponse> localVarResponse = await GetSchoolsForTermAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the schools for a term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SchoolsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolsResponse>> GetSchoolsForTermAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolsForTerm");

            var localVarPath = "/terms/{id}/schools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolsForTerm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsResponse)));
        }

        /// <summary>
        ///  Returns the schools for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SchoolsResponse</returns>
        public SchoolsResponse GetSchoolsForUser (string id, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SchoolsResponse> localVarResponse = GetSchoolsForUserWithHttpInfo(id, primary, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the schools for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SchoolsResponse</returns>
        public ApiResponse< SchoolsResponse > GetSchoolsForUserWithHttpInfo (string id, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolsForUser");

            var localVarPath = "/users/{id}/schools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (primary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "primary", primary)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsResponse)));
        }

        /// <summary>
        ///  Returns the schools for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SchoolsResponse</returns>
        public async System.Threading.Tasks.Task<SchoolsResponse> GetSchoolsForUserAsync (string id, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SchoolsResponse> localVarResponse = await GetSchoolsForUserAsyncWithHttpInfo(id, primary, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the schools for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SchoolsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolsResponse>> GetSchoolsForUserAsyncWithHttpInfo (string id, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolsForUser");

            var localVarPath = "/users/{id}/schools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (primary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "primary", primary)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsResponse)));
        }

        /// <summary>
        ///  Returns a specific section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SectionResponse</returns>
        public SectionResponse GetSection (string id)
        {
             ApiResponse<SectionResponse> localVarResponse = GetSectionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SectionResponse</returns>
        public ApiResponse< SectionResponse > GetSectionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSection");

            var localVarPath = "/sections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionResponse)));
        }

        /// <summary>
        ///  Returns a specific section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SectionResponse</returns>
        public async System.Threading.Tasks.Task<SectionResponse> GetSectionAsync (string id)
        {
             ApiResponse<SectionResponse> localVarResponse = await GetSectionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SectionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SectionResponse>> GetSectionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSection");

            var localVarPath = "/sections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionResponse)));
        }

        /// <summary>
        ///  Returns a list of sections
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        public SectionsResponse GetSections (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = GetSectionsWithHttpInfo(limit, startingAfter, endingBefore, count);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of sections
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        public ApiResponse< SectionsResponse > GetSectionsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {

            var localVarPath = "/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns a list of sections
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        public async System.Threading.Tasks.Task<SectionsResponse> GetSectionsAsync (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = await GetSectionsAsyncWithHttpInfo(limit, startingAfter, endingBefore, count);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of sections
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {

            var localVarPath = "/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        public SectionsResponse GetSectionsForCourse (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = GetSectionsForCourseWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the sections for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        public ApiResponse< SectionsResponse > GetSectionsForCourseWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForCourse");

            var localVarPath = "/courses/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        public async System.Threading.Tasks.Task<SectionsResponse> GetSectionsForCourseAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = await GetSectionsForCourseAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the sections for a course
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForCourseAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForCourse");

            var localVarPath = "/courses/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        public SectionsResponse GetSectionsForResource (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = GetSectionsForResourceWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the sections for a resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        public ApiResponse< SectionsResponse > GetSectionsForResourceWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForResource");

            var localVarPath = "/resources/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        public async System.Threading.Tasks.Task<SectionsResponse> GetSectionsForResourceAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = await GetSectionsForResourceAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the sections for a resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForResourceAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForResource");

            var localVarPath = "/resources/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        public SectionsResponse GetSectionsForSchool (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = GetSectionsForSchoolWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the sections for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        public ApiResponse< SectionsResponse > GetSectionsForSchoolWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForSchool");

            var localVarPath = "/schools/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        public async System.Threading.Tasks.Task<SectionsResponse> GetSectionsForSchoolAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = await GetSectionsForSchoolAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the sections for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForSchoolAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForSchool");

            var localVarPath = "/schools/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        public SectionsResponse GetSectionsForTerm (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = GetSectionsForTermWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the sections for a term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        public ApiResponse< SectionsResponse > GetSectionsForTermWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForTerm");

            var localVarPath = "/terms/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForTerm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        public async System.Threading.Tasks.Task<SectionsResponse> GetSectionsForTermAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = await GetSectionsForTermAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the sections for a term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForTermAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForTerm");

            var localVarPath = "/terms/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForTerm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        public SectionsResponse GetSectionsForUser (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = GetSectionsForUserWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the sections for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        public ApiResponse< SectionsResponse > GetSectionsForUserWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForUser");

            var localVarPath = "/users/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        public async System.Threading.Tasks.Task<SectionsResponse> GetSectionsForUserAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = await GetSectionsForUserAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the sections for a user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForUserAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForUser");

            var localVarPath = "/users/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the student users for a teacher or contact user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>UsersResponse</returns>
        public UsersResponse GetStudentsForUser (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<UsersResponse> localVarResponse = GetStudentsForUserWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the student users for a teacher or contact user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        public ApiResponse< UsersResponse > GetStudentsForUserWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetStudentsForUser");

            var localVarPath = "/users/{id}/mystudents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudentsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
        }

        /// <summary>
        ///  Returns the student users for a teacher or contact user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        public async System.Threading.Tasks.Task<UsersResponse> GetStudentsForUserAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<UsersResponse> localVarResponse = await GetStudentsForUserAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the student users for a teacher or contact user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersResponse>> GetStudentsForUserAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetStudentsForUser");

            var localVarPath = "/users/{id}/mystudents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudentsForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
        }

        /// <summary>
        ///  Returns the teacher users for a student user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>UsersResponse</returns>
        public UsersResponse GetTeachersForUser (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<UsersResponse> localVarResponse = GetTeachersForUserWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the teacher users for a student user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        public ApiResponse< UsersResponse > GetTeachersForUserWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTeachersForUser");

            var localVarPath = "/users/{id}/myteachers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeachersForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
        }

        /// <summary>
        ///  Returns the teacher users for a student user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        public async System.Threading.Tasks.Task<UsersResponse> GetTeachersForUserAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<UsersResponse> localVarResponse = await GetTeachersForUserAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the teacher users for a student user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersResponse>> GetTeachersForUserAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTeachersForUser");

            var localVarPath = "/users/{id}/myteachers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeachersForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
        }

        /// <summary>
        ///  Returns a specific term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TermResponse</returns>
        public TermResponse GetTerm (string id)
        {
             ApiResponse<TermResponse> localVarResponse = GetTermWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TermResponse</returns>
        public ApiResponse< TermResponse > GetTermWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTerm");

            var localVarPath = "/terms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTerm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TermResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TermResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TermResponse)));
        }

        /// <summary>
        ///  Returns a specific term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of TermResponse</returns>
        public async System.Threading.Tasks.Task<TermResponse> GetTermAsync (string id)
        {
             ApiResponse<TermResponse> localVarResponse = await GetTermAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific term
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (TermResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TermResponse>> GetTermAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTerm");

            var localVarPath = "/terms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTerm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TermResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TermResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TermResponse)));
        }

        /// <summary>
        ///  Returns the term for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TermResponse</returns>
        public TermResponse GetTermForSection (string id)
        {
             ApiResponse<TermResponse> localVarResponse = GetTermForSectionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the term for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TermResponse</returns>
        public ApiResponse< TermResponse > GetTermForSectionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTermForSection");

            var localVarPath = "/sections/{id}/term";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTermForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TermResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TermResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TermResponse)));
        }

        /// <summary>
        ///  Returns the term for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of TermResponse</returns>
        public async System.Threading.Tasks.Task<TermResponse> GetTermForSectionAsync (string id)
        {
             ApiResponse<TermResponse> localVarResponse = await GetTermForSectionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the term for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (TermResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TermResponse>> GetTermForSectionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTermForSection");

            var localVarPath = "/sections/{id}/term";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTermForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TermResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TermResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TermResponse)));
        }

        /// <summary>
        ///  Returns a list of terms
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>TermsResponse</returns>
        public TermsResponse GetTerms (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {
             ApiResponse<TermsResponse> localVarResponse = GetTermsWithHttpInfo(limit, startingAfter, endingBefore, count);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of terms
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of TermsResponse</returns>
        public ApiResponse< TermsResponse > GetTermsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {

            var localVarPath = "/terms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTerms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TermsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TermsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TermsResponse)));
        }

        /// <summary>
        ///  Returns a list of terms
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of TermsResponse</returns>
        public async System.Threading.Tasks.Task<TermsResponse> GetTermsAsync (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {
             ApiResponse<TermsResponse> localVarResponse = await GetTermsAsyncWithHttpInfo(limit, startingAfter, endingBefore, count);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of terms
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (TermsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TermsResponse>> GetTermsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string count = null)
        {

            var localVarPath = "/terms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTerms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TermsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TermsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TermsResponse)));
        }

        /// <summary>
        ///  Returns the terms for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>TermsResponse</returns>
        public TermsResponse GetTermsForSchool (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<TermsResponse> localVarResponse = GetTermsForSchoolWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the terms for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of TermsResponse</returns>
        public ApiResponse< TermsResponse > GetTermsForSchoolWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTermsForSchool");

            var localVarPath = "/schools/{id}/terms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTermsForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TermsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TermsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TermsResponse)));
        }

        /// <summary>
        ///  Returns the terms for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of TermsResponse</returns>
        public async System.Threading.Tasks.Task<TermsResponse> GetTermsForSchoolAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<TermsResponse> localVarResponse = await GetTermsForSchoolAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the terms for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (TermsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TermsResponse>> GetTermsForSchoolAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTermsForSchool");

            var localVarPath = "/schools/{id}/terms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTermsForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TermsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TermsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TermsResponse)));
        }

        /// <summary>
        ///  Returns a specific user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserResponse</returns>
        public UserResponse GetUser (string id)
        {
             ApiResponse<UserResponse> localVarResponse = GetUserWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserResponse</returns>
        public ApiResponse< UserResponse > GetUserWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponse)));
        }

        /// <summary>
        ///  Returns a specific user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserResponse</returns>
        public async System.Threading.Tasks.Task<UserResponse> GetUserAsync (string id)
        {
             ApiResponse<UserResponse> localVarResponse = await GetUserAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific user
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserResponse>> GetUserAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponse)));
        }

        /// <summary>
        ///  Returns a list of contact, district admin, staff, student, and/or teacher users
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="role"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>UsersResponse</returns>
        public UsersResponse GetUsers (int? limit = null, string role = null, string startingAfter = null, string endingBefore = null, string count = null)
        {
             ApiResponse<UsersResponse> localVarResponse = GetUsersWithHttpInfo(limit, role, startingAfter, endingBefore, count);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of contact, district admin, staff, student, and/or teacher users
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="role"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        public ApiResponse< UsersResponse > GetUsersWithHttpInfo (int? limit = null, string role = null, string startingAfter = null, string endingBefore = null, string count = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (role != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
        }

        /// <summary>
        ///  Returns a list of contact, district admin, staff, student, and/or teacher users
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="role"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        public async System.Threading.Tasks.Task<UsersResponse> GetUsersAsync (int? limit = null, string role = null, string startingAfter = null, string endingBefore = null, string count = null)
        {
             ApiResponse<UsersResponse> localVarResponse = await GetUsersAsyncWithHttpInfo(limit, role, startingAfter, endingBefore, count);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of contact, district admin, staff, student, and/or teacher users
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="role"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersResponse>> GetUsersAsyncWithHttpInfo (int? limit = null, string role = null, string startingAfter = null, string endingBefore = null, string count = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (role != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
        }

        /// <summary>
        ///  Returns the student and/or teacher users for a resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>UsersResponse</returns>
        public UsersResponse GetUsersForResource (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<UsersResponse> localVarResponse = GetUsersForResourceWithHttpInfo(id, role, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the student and/or teacher users for a resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        public ApiResponse< UsersResponse > GetUsersForResourceWithHttpInfo (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetUsersForResource");

            var localVarPath = "/resources/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (role != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersForResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
        }

        /// <summary>
        ///  Returns the student and/or teacher users for a resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        public async System.Threading.Tasks.Task<UsersResponse> GetUsersForResourceAsync (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<UsersResponse> localVarResponse = await GetUsersForResourceAsyncWithHttpInfo(id, role, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the student and/or teacher users for a resource
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersResponse>> GetUsersForResourceAsyncWithHttpInfo (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetUsersForResource");

            var localVarPath = "/resources/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (role != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersForResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
        }

        /// <summary>
        ///  Returns the staff, student, and/or teacher users for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>UsersResponse</returns>
        public UsersResponse GetUsersForSchool (string id, string role = null, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<UsersResponse> localVarResponse = GetUsersForSchoolWithHttpInfo(id, role, primary, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the staff, student, and/or teacher users for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        public ApiResponse< UsersResponse > GetUsersForSchoolWithHttpInfo (string id, string role = null, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetUsersForSchool");

            var localVarPath = "/schools/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (role != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
            if (primary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "primary", primary)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
        }

        /// <summary>
        ///  Returns the staff, student, and/or teacher users for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        public async System.Threading.Tasks.Task<UsersResponse> GetUsersForSchoolAsync (string id, string role = null, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<UsersResponse> localVarResponse = await GetUsersForSchoolAsyncWithHttpInfo(id, role, primary, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the staff, student, and/or teacher users for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="primary"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersResponse>> GetUsersForSchoolAsyncWithHttpInfo (string id, string role = null, string primary = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetUsersForSchool");

            var localVarPath = "/schools/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (role != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
            if (primary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "primary", primary)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
        }

        /// <summary>
        ///  Returns the student and/or teacher users for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>UsersResponse</returns>
        public UsersResponse GetUsersForSection (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<UsersResponse> localVarResponse = GetUsersForSectionWithHttpInfo(id, role, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the student and/or teacher users for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of UsersResponse</returns>
        public ApiResponse< UsersResponse > GetUsersForSectionWithHttpInfo (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetUsersForSection");

            var localVarPath = "/sections/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (role != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
        }

        /// <summary>
        ///  Returns the student and/or teacher users for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of UsersResponse</returns>
        public async System.Threading.Tasks.Task<UsersResponse> GetUsersForSectionAsync (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<UsersResponse> localVarResponse = await GetUsersForSectionAsyncWithHttpInfo(id, role, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the student and/or teacher users for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="role"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (UsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersResponse>> GetUsersForSectionAsyncWithHttpInfo (string id, string role = null, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetUsersForSection");

            var localVarPath = "/sections/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (role != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersResponse)));
        }

    }
}
