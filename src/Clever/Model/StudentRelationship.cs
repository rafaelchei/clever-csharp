/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Clever.Client.SwaggerDateConverter;

namespace Clever.Model
{
    /// <summary>
    /// StudentRelationship
    /// </summary>
    [DataContract]
    public partial class StudentRelationship :  IEquatable<StudentRelationship>, IValidatableObject
    {
        /// <summary>
        /// Defines Relationship
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RelationshipEnum
        {
            
            /// <summary>
            /// Enum Parent for value: Parent
            /// </summary>
            [EnumMember(Value = "Parent")]
            Parent = 1,
            
            /// <summary>
            /// Enum Grandparent for value: Grandparent
            /// </summary>
            [EnumMember(Value = "Grandparent")]
            Grandparent = 2,
            
            /// <summary>
            /// Enum Self for value: Self
            /// </summary>
            [EnumMember(Value = "Self")]
            Self = 3,
            
            /// <summary>
            /// Enum AuntUncle for value: Aunt/Uncle
            /// </summary>
            [EnumMember(Value = "Aunt/Uncle")]
            AuntUncle = 4,
            
            /// <summary>
            /// Enum Sibling for value: Sibling
            /// </summary>
            [EnumMember(Value = "Sibling")]
            Sibling = 5,
            
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 6,
            
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 7
        }

        /// <summary>
        /// Gets or Sets Relationship
        /// </summary>
        [DataMember(Name="relationship", EmitDefaultValue=false)]
        public RelationshipEnum? Relationship { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum ParentGuardian for value: Parent/Guardian
            /// </summary>
            [EnumMember(Value = "Parent/Guardian")]
            ParentGuardian = 1,
            
            /// <summary>
            /// Enum Emergency for value: Emergency
            /// </summary>
            [EnumMember(Value = "Emergency")]
            Emergency = 2,
            
            /// <summary>
            /// Enum Primary for value: Primary
            /// </summary>
            [EnumMember(Value = "Primary")]
            Primary = 3,
            
            /// <summary>
            /// Enum Secondary for value: Secondary
            /// </summary>
            [EnumMember(Value = "Secondary")]
            Secondary = 4,
            
            /// <summary>
            /// Enum Family for value: Family
            /// </summary>
            [EnumMember(Value = "Family")]
            Family = 5,
            
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 6,
            
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 7
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StudentRelationship" /> class.
        /// </summary>
        /// <param name="relationship">relationship.</param>
        /// <param name="student">student.</param>
        /// <param name="type">type.</param>
        public StudentRelationship(RelationshipEnum? relationship = default(RelationshipEnum?), string student = default(string), TypeEnum? type = default(TypeEnum?))
        {
            this.Relationship = relationship;
            this.Student = student;
            this.Type = type;
        }
        

        /// <summary>
        /// Gets or Sets Student
        /// </summary>
        [DataMember(Name="student", EmitDefaultValue=false)]
        public string Student { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StudentRelationship {\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("  Student: ").Append(Student).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StudentRelationship);
        }

        /// <summary>
        /// Returns true if StudentRelationship instances are equal
        /// </summary>
        /// <param name="input">Instance of StudentRelationship to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentRelationship input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Relationship == input.Relationship ||
                    (this.Relationship != null &&
                    this.Relationship.Equals(input.Relationship))
                ) && 
                (
                    this.Student == input.Student ||
                    (this.Student != null &&
                    this.Student.Equals(input.Student))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Relationship != null)
                    hashCode = hashCode * 59 + this.Relationship.GetHashCode();
                if (this.Student != null)
                    hashCode = hashCode * 59 + this.Student.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
