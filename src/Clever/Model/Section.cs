/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Clever.Client.SwaggerDateConverter;

namespace Clever.Model
{
    /// <summary>
    /// Section
    /// </summary>
    [DataContract]
    public partial class Section :  IEquatable<Section>, IValidatableObject
    {
        /// <summary>
        /// Defines Grade
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GradeEnum
        {
            
            /// <summary>
            /// Enum InfantToddler for value: InfantToddler
            /// </summary>
            [EnumMember(Value = "InfantToddler")]
            InfantToddler = 1,
            
            /// <summary>
            /// Enum Preschool for value: Preschool
            /// </summary>
            [EnumMember(Value = "Preschool")]
            Preschool = 2,
            
            /// <summary>
            /// Enum PreKindergarten for value: PreKindergarten
            /// </summary>
            [EnumMember(Value = "PreKindergarten")]
            PreKindergarten = 3,
            
            /// <summary>
            /// Enum TransitionalKindergarten for value: TransitionalKindergarten
            /// </summary>
            [EnumMember(Value = "TransitionalKindergarten")]
            TransitionalKindergarten = 4,
            
            /// <summary>
            /// Enum Kindergarten for value: Kindergarten
            /// </summary>
            [EnumMember(Value = "Kindergarten")]
            Kindergarten = 5,
            
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 6,
            
            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 7,
            
            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 8,
            
            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 9,
            
            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 10,
            
            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 11,
            
            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 12,
            
            /// <summary>
            /// Enum _8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            _8 = 13,
            
            /// <summary>
            /// Enum _9 for value: 9
            /// </summary>
            [EnumMember(Value = "9")]
            _9 = 14,
            
            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 15,
            
            /// <summary>
            /// Enum _11 for value: 11
            /// </summary>
            [EnumMember(Value = "11")]
            _11 = 16,
            
            /// <summary>
            /// Enum _12 for value: 12
            /// </summary>
            [EnumMember(Value = "12")]
            _12 = 17,
            
            /// <summary>
            /// Enum _13 for value: 13
            /// </summary>
            [EnumMember(Value = "13")]
            _13 = 18,
            
            /// <summary>
            /// Enum PostGraduate for value: PostGraduate
            /// </summary>
            [EnumMember(Value = "PostGraduate")]
            PostGraduate = 19,
            
            /// <summary>
            /// Enum Ungraded for value: Ungraded
            /// </summary>
            [EnumMember(Value = "Ungraded")]
            Ungraded = 20,
            
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 21,
            
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 22
        }

        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public GradeEnum? Grade { get; set; }
        /// <summary>
        /// Defines Subject
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubjectEnum
        {
            
            /// <summary>
            /// Enum EnglishLanguagearts for value: english/language arts
            /// </summary>
            [EnumMember(Value = "english/language arts")]
            EnglishLanguagearts = 1,
            
            /// <summary>
            /// Enum Math for value: math
            /// </summary>
            [EnumMember(Value = "math")]
            Math = 2,
            
            /// <summary>
            /// Enum Science for value: science
            /// </summary>
            [EnumMember(Value = "science")]
            Science = 3,
            
            /// <summary>
            /// Enum Socialstudies for value: social studies
            /// </summary>
            [EnumMember(Value = "social studies")]
            Socialstudies = 4,
            
            /// <summary>
            /// Enum Language for value: language
            /// </summary>
            [EnumMember(Value = "language")]
            Language = 5,
            
            /// <summary>
            /// Enum HomeroomAdvisory for value: homeroom/advisory
            /// </summary>
            [EnumMember(Value = "homeroom/advisory")]
            HomeroomAdvisory = 6,
            
            /// <summary>
            /// Enum InterventionsOnlinelearning for value: interventions/online learning
            /// </summary>
            [EnumMember(Value = "interventions/online learning")]
            InterventionsOnlinelearning = 7,
            
            /// <summary>
            /// Enum Technologyandengineering for value: technology and engineering
            /// </summary>
            [EnumMember(Value = "technology and engineering")]
            Technologyandengineering = 8,
            
            /// <summary>
            /// Enum PEandhealth for value: PE and health
            /// </summary>
            [EnumMember(Value = "PE and health")]
            PEandhealth = 9,
            
            /// <summary>
            /// Enum Artsandmusic for value: arts and music
            /// </summary>
            [EnumMember(Value = "arts and music")]
            Artsandmusic = 10,
            
            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 11,
            
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 12
        }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public SubjectEnum? Subject { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Section" /> class.
        /// </summary>
        /// <param name="course">course.</param>
        /// <param name="created">created.</param>
        /// <param name="district">district.</param>
        /// <param name="ext">ext.</param>
        /// <param name="grade">grade.</param>
        /// <param name="id">id.</param>
        /// <param name="lastModified">lastModified.</param>
        /// <param name="name">name.</param>
        /// <param name="period">period.</param>
        /// <param name="school">school.</param>
        /// <param name="sectionNumber">sectionNumber.</param>
        /// <param name="sisId">sisId.</param>
        /// <param name="students">students.</param>
        /// <param name="subject">subject.</param>
        /// <param name="teacher">teacher.</param>
        /// <param name="teachers">teachers.</param>
        /// <param name="termId">termId.</param>
        public Section(string course = default(string), string created = default(string), string district = default(string), Object ext = default(Object), GradeEnum? grade = default(GradeEnum?), string id = default(string), string lastModified = default(string), string name = default(string), string period = default(string), string school = default(string), string sectionNumber = default(string), string sisId = default(string), List<string> students = default(List<string>), SubjectEnum? subject = default(SubjectEnum?), string teacher = default(string), List<string> teachers = default(List<string>), string termId = default(string))
        {
            this.Course = course;
            this.Created = created;
            this.District = district;
            this.Ext = ext;
            this.Grade = grade;
            this.Id = id;
            this.LastModified = lastModified;
            this.Name = name;
            this.Period = period;
            this.School = school;
            this.SectionNumber = sectionNumber;
            this.SisId = sisId;
            this.Students = students;
            this.Subject = subject;
            this.Teacher = teacher;
            this.Teachers = teachers;
            this.TermId = termId;
        }
        
        /// <summary>
        /// Gets or Sets Course
        /// </summary>
        [DataMember(Name="course", EmitDefaultValue=false)]
        public string Course { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets District
        /// </summary>
        [DataMember(Name="district", EmitDefaultValue=false)]
        public string District { get; set; }

        /// <summary>
        /// Gets or Sets Ext
        /// </summary>
        [DataMember(Name="ext", EmitDefaultValue=false)]
        public Object Ext { get; set; }


        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name="last_modified", EmitDefaultValue=false)]
        public string LastModified { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public string Period { get; set; }

        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [DataMember(Name="school", EmitDefaultValue=false)]
        public string School { get; set; }

        /// <summary>
        /// Gets or Sets SectionNumber
        /// </summary>
        [DataMember(Name="section_number", EmitDefaultValue=false)]
        public string SectionNumber { get; set; }

        /// <summary>
        /// Gets or Sets SisId
        /// </summary>
        [DataMember(Name="sis_id", EmitDefaultValue=false)]
        public string SisId { get; set; }

        /// <summary>
        /// Gets or Sets Students
        /// </summary>
        [DataMember(Name="students", EmitDefaultValue=false)]
        public List<string> Students { get; set; }


        /// <summary>
        /// Gets or Sets Teacher
        /// </summary>
        [DataMember(Name="teacher", EmitDefaultValue=false)]
        public string Teacher { get; set; }

        /// <summary>
        /// Gets or Sets Teachers
        /// </summary>
        [DataMember(Name="teachers", EmitDefaultValue=false)]
        public List<string> Teachers { get; set; }

        /// <summary>
        /// Gets or Sets TermId
        /// </summary>
        [DataMember(Name="term_id", EmitDefaultValue=false)]
        public string TermId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Section {\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("  SectionNumber: ").Append(SectionNumber).Append("\n");
            sb.Append("  SisId: ").Append(SisId).Append("\n");
            sb.Append("  Students: ").Append(Students).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Teacher: ").Append(Teacher).Append("\n");
            sb.Append("  Teachers: ").Append(Teachers).Append("\n");
            sb.Append("  TermId: ").Append(TermId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Section);
        }

        /// <summary>
        /// Returns true if Section instances are equal
        /// </summary>
        /// <param name="input">Instance of Section to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Section input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Course == input.Course ||
                    (this.Course != null &&
                    this.Course.Equals(input.Course))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.District == input.District ||
                    (this.District != null &&
                    this.District.Equals(input.District))
                ) && 
                (
                    this.Ext == input.Ext ||
                    (this.Ext != null &&
                    this.Ext.Equals(input.Ext))
                ) && 
                (
                    this.Grade == input.Grade ||
                    (this.Grade != null &&
                    this.Grade.Equals(input.Grade))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.School == input.School ||
                    (this.School != null &&
                    this.School.Equals(input.School))
                ) && 
                (
                    this.SectionNumber == input.SectionNumber ||
                    (this.SectionNumber != null &&
                    this.SectionNumber.Equals(input.SectionNumber))
                ) && 
                (
                    this.SisId == input.SisId ||
                    (this.SisId != null &&
                    this.SisId.Equals(input.SisId))
                ) && 
                (
                    this.Students == input.Students ||
                    this.Students != null &&
                    this.Students.SequenceEqual(input.Students)
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Teacher == input.Teacher ||
                    (this.Teacher != null &&
                    this.Teacher.Equals(input.Teacher))
                ) && 
                (
                    this.Teachers == input.Teachers ||
                    this.Teachers != null &&
                    this.Teachers.SequenceEqual(input.Teachers)
                ) && 
                (
                    this.TermId == input.TermId ||
                    (this.TermId != null &&
                    this.TermId.Equals(input.TermId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Course != null)
                    hashCode = hashCode * 59 + this.Course.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.District != null)
                    hashCode = hashCode * 59 + this.District.GetHashCode();
                if (this.Ext != null)
                    hashCode = hashCode * 59 + this.Ext.GetHashCode();
                if (this.Grade != null)
                    hashCode = hashCode * 59 + this.Grade.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.School != null)
                    hashCode = hashCode * 59 + this.School.GetHashCode();
                if (this.SectionNumber != null)
                    hashCode = hashCode * 59 + this.SectionNumber.GetHashCode();
                if (this.SisId != null)
                    hashCode = hashCode * 59 + this.SisId.GetHashCode();
                if (this.Students != null)
                    hashCode = hashCode * 59 + this.Students.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Teacher != null)
                    hashCode = hashCode * 59 + this.Teacher.GetHashCode();
                if (this.Teachers != null)
                    hashCode = hashCode * 59 + this.Teachers.GetHashCode();
                if (this.TermId != null)
                    hashCode = hashCode * 59 + this.TermId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
