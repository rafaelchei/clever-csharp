/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Clever.Client.SwaggerDateConverter;

namespace Clever.Model
{
    /// <summary>
    /// Student
    /// </summary>
    [DataContract]
    public partial class Student :  IEquatable<Student>, IValidatableObject
    {
        /// <summary>
        /// Defines EllStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EllStatusEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2,
            
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 3
        }

        /// <summary>
        /// Gets or Sets EllStatus
        /// </summary>
        [DataMember(Name="ell_status", EmitDefaultValue=false)]
        public EllStatusEnum? EllStatus { get; set; }
        /// <summary>
        /// Defines Gender
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 1,
            
            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 2,
            
            /// <summary>
            /// Enum X for value: X
            /// </summary>
            [EnumMember(Value = "X")]
            X = 3,
            
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 4
        }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public GenderEnum? Gender { get; set; }
        /// <summary>
        /// Defines Grade
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GradeEnum
        {
            
            /// <summary>
            /// Enum InfantToddler for value: InfantToddler
            /// </summary>
            [EnumMember(Value = "InfantToddler")]
            InfantToddler = 1,
            
            /// <summary>
            /// Enum Preschool for value: Preschool
            /// </summary>
            [EnumMember(Value = "Preschool")]
            Preschool = 2,
            
            /// <summary>
            /// Enum PreKindergarten for value: PreKindergarten
            /// </summary>
            [EnumMember(Value = "PreKindergarten")]
            PreKindergarten = 3,
            
            /// <summary>
            /// Enum TransitionalKindergarten for value: TransitionalKindergarten
            /// </summary>
            [EnumMember(Value = "TransitionalKindergarten")]
            TransitionalKindergarten = 4,
            
            /// <summary>
            /// Enum Kindergarten for value: Kindergarten
            /// </summary>
            [EnumMember(Value = "Kindergarten")]
            Kindergarten = 5,
            
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 6,
            
            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 7,
            
            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 8,
            
            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 9,
            
            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 10,
            
            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 11,
            
            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 12,
            
            /// <summary>
            /// Enum _8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            _8 = 13,
            
            /// <summary>
            /// Enum _9 for value: 9
            /// </summary>
            [EnumMember(Value = "9")]
            _9 = 14,
            
            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 15,
            
            /// <summary>
            /// Enum _11 for value: 11
            /// </summary>
            [EnumMember(Value = "11")]
            _11 = 16,
            
            /// <summary>
            /// Enum _12 for value: 12
            /// </summary>
            [EnumMember(Value = "12")]
            _12 = 17,
            
            /// <summary>
            /// Enum _13 for value: 13
            /// </summary>
            [EnumMember(Value = "13")]
            _13 = 18,
            
            /// <summary>
            /// Enum PostGraduate for value: PostGraduate
            /// </summary>
            [EnumMember(Value = "PostGraduate")]
            PostGraduate = 19,
            
            /// <summary>
            /// Enum Ungraded for value: Ungraded
            /// </summary>
            [EnumMember(Value = "Ungraded")]
            Ungraded = 20,
            
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 21,
            
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 22
        }

        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public GradeEnum? Grade { get; set; }
        /// <summary>
        /// Defines HispanicEthnicity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HispanicEthnicityEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2,
            
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 3
        }

        /// <summary>
        /// Gets or Sets HispanicEthnicity
        /// </summary>
        [DataMember(Name="hispanic_ethnicity", EmitDefaultValue=false)]
        public HispanicEthnicityEnum? HispanicEthnicity { get; set; }
        /// <summary>
        /// Defines HomeLanguage
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HomeLanguageEnum
        {
            
            /// <summary>
            /// Enum English for value: English
            /// </summary>
            [EnumMember(Value = "English")]
            English = 1,
            
            /// <summary>
            /// Enum Albanian for value: Albanian
            /// </summary>
            [EnumMember(Value = "Albanian")]
            Albanian = 2,
            
            /// <summary>
            /// Enum Amharic for value: Amharic
            /// </summary>
            [EnumMember(Value = "Amharic")]
            Amharic = 3,
            
            /// <summary>
            /// Enum Arabic for value: Arabic
            /// </summary>
            [EnumMember(Value = "Arabic")]
            Arabic = 4,
            
            /// <summary>
            /// Enum Bengali for value: Bengali
            /// </summary>
            [EnumMember(Value = "Bengali")]
            Bengali = 5,
            
            /// <summary>
            /// Enum Bosnian for value: Bosnian
            /// </summary>
            [EnumMember(Value = "Bosnian")]
            Bosnian = 6,
            
            /// <summary>
            /// Enum Burmese for value: Burmese
            /// </summary>
            [EnumMember(Value = "Burmese")]
            Burmese = 7,
            
            /// <summary>
            /// Enum Cantonese for value: Cantonese
            /// </summary>
            [EnumMember(Value = "Cantonese")]
            Cantonese = 8,
            
            /// <summary>
            /// Enum Chinese for value: Chinese
            /// </summary>
            [EnumMember(Value = "Chinese")]
            Chinese = 9,
            
            /// <summary>
            /// Enum Dutch for value: Dutch
            /// </summary>
            [EnumMember(Value = "Dutch")]
            Dutch = 10,
            
            /// <summary>
            /// Enum Farsi for value: Farsi
            /// </summary>
            [EnumMember(Value = "Farsi")]
            Farsi = 11,
            
            /// <summary>
            /// Enum French for value: French
            /// </summary>
            [EnumMember(Value = "French")]
            French = 12,
            
            /// <summary>
            /// Enum German for value: German
            /// </summary>
            [EnumMember(Value = "German")]
            German = 13,
            
            /// <summary>
            /// Enum Hebrew for value: Hebrew
            /// </summary>
            [EnumMember(Value = "Hebrew")]
            Hebrew = 14,
            
            /// <summary>
            /// Enum Hindi for value: Hindi
            /// </summary>
            [EnumMember(Value = "Hindi")]
            Hindi = 15,
            
            /// <summary>
            /// Enum Hmong for value: Hmong
            /// </summary>
            [EnumMember(Value = "Hmong")]
            Hmong = 16,
            
            /// <summary>
            /// Enum Ilocano for value: Ilocano
            /// </summary>
            [EnumMember(Value = "Ilocano")]
            Ilocano = 17,
            
            /// <summary>
            /// Enum Japanese for value: Japanese
            /// </summary>
            [EnumMember(Value = "Japanese")]
            Japanese = 18,
            
            /// <summary>
            /// Enum Javanese for value: Javanese
            /// </summary>
            [EnumMember(Value = "Javanese")]
            Javanese = 19,
            
            /// <summary>
            /// Enum Karen for value: Karen
            /// </summary>
            [EnumMember(Value = "Karen")]
            Karen = 20,
            
            /// <summary>
            /// Enum Khmer for value: Khmer
            /// </summary>
            [EnumMember(Value = "Khmer")]
            Khmer = 21,
            
            /// <summary>
            /// Enum Korean for value: Korean
            /// </summary>
            [EnumMember(Value = "Korean")]
            Korean = 22,
            
            /// <summary>
            /// Enum Laotian for value: Laotian
            /// </summary>
            [EnumMember(Value = "Laotian")]
            Laotian = 23,
            
            /// <summary>
            /// Enum Latvian for value: Latvian
            /// </summary>
            [EnumMember(Value = "Latvian")]
            Latvian = 24,
            
            /// <summary>
            /// Enum Malay for value: Malay
            /// </summary>
            [EnumMember(Value = "Malay")]
            Malay = 25,
            
            /// <summary>
            /// Enum Mandarin for value: Mandarin
            /// </summary>
            [EnumMember(Value = "Mandarin")]
            Mandarin = 26,
            
            /// <summary>
            /// Enum Nepali for value: Nepali
            /// </summary>
            [EnumMember(Value = "Nepali")]
            Nepali = 27,
            
            /// <summary>
            /// Enum Oromo for value: Oromo
            /// </summary>
            [EnumMember(Value = "Oromo")]
            Oromo = 28,
            
            /// <summary>
            /// Enum Polish for value: Polish
            /// </summary>
            [EnumMember(Value = "Polish")]
            Polish = 29,
            
            /// <summary>
            /// Enum Portuguese for value: Portuguese
            /// </summary>
            [EnumMember(Value = "Portuguese")]
            Portuguese = 30,
            
            /// <summary>
            /// Enum Punjabi for value: Punjabi
            /// </summary>
            [EnumMember(Value = "Punjabi")]
            Punjabi = 31,
            
            /// <summary>
            /// Enum Romanian for value: Romanian
            /// </summary>
            [EnumMember(Value = "Romanian")]
            Romanian = 32,
            
            /// <summary>
            /// Enum Russian for value: Russian
            /// </summary>
            [EnumMember(Value = "Russian")]
            Russian = 33,
            
            /// <summary>
            /// Enum Samoan for value: Samoan
            /// </summary>
            [EnumMember(Value = "Samoan")]
            Samoan = 34,
            
            /// <summary>
            /// Enum Serbian for value: Serbian
            /// </summary>
            [EnumMember(Value = "Serbian")]
            Serbian = 35,
            
            /// <summary>
            /// Enum Somali for value: Somali
            /// </summary>
            [EnumMember(Value = "Somali")]
            Somali = 36,
            
            /// <summary>
            /// Enum Spanish for value: Spanish
            /// </summary>
            [EnumMember(Value = "Spanish")]
            Spanish = 37,
            
            /// <summary>
            /// Enum Swahili for value: Swahili
            /// </summary>
            [EnumMember(Value = "Swahili")]
            Swahili = 38,
            
            /// <summary>
            /// Enum Tagalog for value: Tagalog
            /// </summary>
            [EnumMember(Value = "Tagalog")]
            Tagalog = 39,
            
            /// <summary>
            /// Enum Tamil for value: Tamil
            /// </summary>
            [EnumMember(Value = "Tamil")]
            Tamil = 40,
            
            /// <summary>
            /// Enum Telugu for value: Telugu
            /// </summary>
            [EnumMember(Value = "Telugu")]
            Telugu = 41,
            
            /// <summary>
            /// Enum Thai for value: Thai
            /// </summary>
            [EnumMember(Value = "Thai")]
            Thai = 42,
            
            /// <summary>
            /// Enum Tigrinya for value: Tigrinya
            /// </summary>
            [EnumMember(Value = "Tigrinya")]
            Tigrinya = 43,
            
            /// <summary>
            /// Enum Turkish for value: Turkish
            /// </summary>
            [EnumMember(Value = "Turkish")]
            Turkish = 44,
            
            /// <summary>
            /// Enum Ukrainian for value: Ukrainian
            /// </summary>
            [EnumMember(Value = "Ukrainian")]
            Ukrainian = 45,
            
            /// <summary>
            /// Enum Urdu for value: Urdu
            /// </summary>
            [EnumMember(Value = "Urdu")]
            Urdu = 46,
            
            /// <summary>
            /// Enum Vietnamese for value: Vietnamese
            /// </summary>
            [EnumMember(Value = "Vietnamese")]
            Vietnamese = 47,
            
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 48
        }

        /// <summary>
        /// Gets or Sets HomeLanguage
        /// </summary>
        [DataMember(Name="home_language", EmitDefaultValue=false)]
        public HomeLanguageEnum? HomeLanguage { get; set; }
        /// <summary>
        /// Defines Race
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RaceEnum
        {
            
            /// <summary>
            /// Enum Caucasian for value: Caucasian
            /// </summary>
            [EnumMember(Value = "Caucasian")]
            Caucasian = 1,
            
            /// <summary>
            /// Enum Asian for value: Asian
            /// </summary>
            [EnumMember(Value = "Asian")]
            Asian = 2,
            
            /// <summary>
            /// Enum BlackorAfricanAmerican for value: Black or African American
            /// </summary>
            [EnumMember(Value = "Black or African American")]
            BlackorAfricanAmerican = 3,
            
            /// <summary>
            /// Enum AmericanIndian for value: American Indian
            /// </summary>
            [EnumMember(Value = "American Indian")]
            AmericanIndian = 4,
            
            /// <summary>
            /// Enum HawaiianorOtherPacificIslander for value: Hawaiian or Other Pacific Islander
            /// </summary>
            [EnumMember(Value = "Hawaiian or Other Pacific Islander")]
            HawaiianorOtherPacificIslander = 5,
            
            /// <summary>
            /// Enum TwoorMoreRaces for value: Two or More Races
            /// </summary>
            [EnumMember(Value = "Two or More Races")]
            TwoorMoreRaces = 6,
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 7,
            
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 8
        }

        /// <summary>
        /// Gets or Sets Race
        /// </summary>
        [DataMember(Name="race", EmitDefaultValue=false)]
        public RaceEnum? Race { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Student" /> class.
        /// </summary>
        /// <param name="created">created.</param>
        /// <param name="credentials">credentials.</param>
        /// <param name="dob">dob.</param>
        /// <param name="ellStatus">ellStatus.</param>
        /// <param name="enrollments">enrollments.</param>
        /// <param name="ext">ext.</param>
        /// <param name="gender">gender.</param>
        /// <param name="grade">grade.</param>
        /// <param name="graduationYear">graduationYear.</param>
        /// <param name="hispanicEthnicity">hispanicEthnicity.</param>
        /// <param name="homeLanguage">homeLanguage.</param>
        /// <param name="iepStatus">iepStatus.</param>
        /// <param name="lastModified">lastModified.</param>
        /// <param name="legacyId">legacyId.</param>
        /// <param name="location">location.</param>
        /// <param name="race">race.</param>
        /// <param name="school">school.</param>
        /// <param name="schools">schools.</param>
        /// <param name="sisId">sisId.</param>
        /// <param name="stateId">stateId.</param>
        /// <param name="studentNumber">studentNumber.</param>
        /// <param name="unweightedGpa">unweightedGpa.</param>
        /// <param name="weightedGpa">weightedGpa.</param>
        public Student(string created = default(string), Credentials credentials = default(Credentials), string dob = default(string), EllStatusEnum? ellStatus = default(EllStatusEnum?), List<SchoolEnrollment> enrollments = default(List<SchoolEnrollment>), Object ext = default(Object), GenderEnum? gender = default(GenderEnum?), GradeEnum? grade = default(GradeEnum?), string graduationYear = default(string), HispanicEthnicityEnum? hispanicEthnicity = default(HispanicEthnicityEnum?), HomeLanguageEnum? homeLanguage = default(HomeLanguageEnum?), string iepStatus = default(string), string lastModified = default(string), string legacyId = default(string), Location location = default(Location), RaceEnum? race = default(RaceEnum?), string school = default(string), List<string> schools = default(List<string>), string sisId = default(string), string stateId = default(string), string studentNumber = default(string), string unweightedGpa = default(string), string weightedGpa = default(string))
        {
            this.Created = created;
            this.Credentials = credentials;
            this.Dob = dob;
            this.EllStatus = ellStatus;
            this.Enrollments = enrollments;
            this.Ext = ext;
            this.Gender = gender;
            this.Grade = grade;
            this.GraduationYear = graduationYear;
            this.HispanicEthnicity = hispanicEthnicity;
            this.HomeLanguage = homeLanguage;
            this.IepStatus = iepStatus;
            this.LastModified = lastModified;
            this.LegacyId = legacyId;
            this.Location = location;
            this.Race = race;
            this.School = school;
            this.Schools = schools;
            this.SisId = sisId;
            this.StateId = stateId;
            this.StudentNumber = studentNumber;
            this.UnweightedGpa = unweightedGpa;
            this.WeightedGpa = weightedGpa;
        }
        
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets Credentials
        /// </summary>
        [DataMember(Name="credentials", EmitDefaultValue=false)]
        public Credentials Credentials { get; set; }

        /// <summary>
        /// Gets or Sets Dob
        /// </summary>
        [DataMember(Name="dob", EmitDefaultValue=false)]
        public string Dob { get; set; }


        /// <summary>
        /// Gets or Sets Enrollments
        /// </summary>
        [DataMember(Name="enrollments", EmitDefaultValue=false)]
        public List<SchoolEnrollment> Enrollments { get; set; }

        /// <summary>
        /// Gets or Sets Ext
        /// </summary>
        [DataMember(Name="ext", EmitDefaultValue=false)]
        public Object Ext { get; set; }



        /// <summary>
        /// Gets or Sets GraduationYear
        /// </summary>
        [DataMember(Name="graduation_year", EmitDefaultValue=false)]
        public string GraduationYear { get; set; }



        /// <summary>
        /// Gets or Sets IepStatus
        /// </summary>
        [DataMember(Name="iep_status", EmitDefaultValue=false)]
        public string IepStatus { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name="last_modified", EmitDefaultValue=false)]
        public string LastModified { get; set; }

        /// <summary>
        /// Gets or Sets LegacyId
        /// </summary>
        [DataMember(Name="legacy_id", EmitDefaultValue=false)]
        public string LegacyId { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public Location Location { get; set; }


        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [DataMember(Name="school", EmitDefaultValue=false)]
        public string School { get; set; }

        /// <summary>
        /// Gets or Sets Schools
        /// </summary>
        [DataMember(Name="schools", EmitDefaultValue=false)]
        public List<string> Schools { get; set; }

        /// <summary>
        /// Gets or Sets SisId
        /// </summary>
        [DataMember(Name="sis_id", EmitDefaultValue=false)]
        public string SisId { get; set; }

        /// <summary>
        /// Gets or Sets StateId
        /// </summary>
        [DataMember(Name="state_id", EmitDefaultValue=false)]
        public string StateId { get; set; }

        /// <summary>
        /// Gets or Sets StudentNumber
        /// </summary>
        [DataMember(Name="student_number", EmitDefaultValue=false)]
        public string StudentNumber { get; set; }

        /// <summary>
        /// Gets or Sets UnweightedGpa
        /// </summary>
        [DataMember(Name="unweighted_gpa", EmitDefaultValue=false)]
        public string UnweightedGpa { get; set; }

        /// <summary>
        /// Gets or Sets WeightedGpa
        /// </summary>
        [DataMember(Name="weighted_gpa", EmitDefaultValue=false)]
        public string WeightedGpa { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Student {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("  Dob: ").Append(Dob).Append("\n");
            sb.Append("  EllStatus: ").Append(EllStatus).Append("\n");
            sb.Append("  Enrollments: ").Append(Enrollments).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  GraduationYear: ").Append(GraduationYear).Append("\n");
            sb.Append("  HispanicEthnicity: ").Append(HispanicEthnicity).Append("\n");
            sb.Append("  HomeLanguage: ").Append(HomeLanguage).Append("\n");
            sb.Append("  IepStatus: ").Append(IepStatus).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LegacyId: ").Append(LegacyId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Race: ").Append(Race).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("  Schools: ").Append(Schools).Append("\n");
            sb.Append("  SisId: ").Append(SisId).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  StudentNumber: ").Append(StudentNumber).Append("\n");
            sb.Append("  UnweightedGpa: ").Append(UnweightedGpa).Append("\n");
            sb.Append("  WeightedGpa: ").Append(WeightedGpa).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Student);
        }

        /// <summary>
        /// Returns true if Student instances are equal
        /// </summary>
        /// <param name="input">Instance of Student to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Student input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Credentials == input.Credentials ||
                    (this.Credentials != null &&
                    this.Credentials.Equals(input.Credentials))
                ) && 
                (
                    this.Dob == input.Dob ||
                    (this.Dob != null &&
                    this.Dob.Equals(input.Dob))
                ) && 
                (
                    this.EllStatus == input.EllStatus ||
                    (this.EllStatus != null &&
                    this.EllStatus.Equals(input.EllStatus))
                ) && 
                (
                    this.Enrollments == input.Enrollments ||
                    this.Enrollments != null &&
                    this.Enrollments.SequenceEqual(input.Enrollments)
                ) && 
                (
                    this.Ext == input.Ext ||
                    (this.Ext != null &&
                    this.Ext.Equals(input.Ext))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.Grade == input.Grade ||
                    (this.Grade != null &&
                    this.Grade.Equals(input.Grade))
                ) && 
                (
                    this.GraduationYear == input.GraduationYear ||
                    (this.GraduationYear != null &&
                    this.GraduationYear.Equals(input.GraduationYear))
                ) && 
                (
                    this.HispanicEthnicity == input.HispanicEthnicity ||
                    (this.HispanicEthnicity != null &&
                    this.HispanicEthnicity.Equals(input.HispanicEthnicity))
                ) && 
                (
                    this.HomeLanguage == input.HomeLanguage ||
                    (this.HomeLanguage != null &&
                    this.HomeLanguage.Equals(input.HomeLanguage))
                ) && 
                (
                    this.IepStatus == input.IepStatus ||
                    (this.IepStatus != null &&
                    this.IepStatus.Equals(input.IepStatus))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LegacyId == input.LegacyId ||
                    (this.LegacyId != null &&
                    this.LegacyId.Equals(input.LegacyId))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Race == input.Race ||
                    (this.Race != null &&
                    this.Race.Equals(input.Race))
                ) && 
                (
                    this.School == input.School ||
                    (this.School != null &&
                    this.School.Equals(input.School))
                ) && 
                (
                    this.Schools == input.Schools ||
                    this.Schools != null &&
                    this.Schools.SequenceEqual(input.Schools)
                ) && 
                (
                    this.SisId == input.SisId ||
                    (this.SisId != null &&
                    this.SisId.Equals(input.SisId))
                ) && 
                (
                    this.StateId == input.StateId ||
                    (this.StateId != null &&
                    this.StateId.Equals(input.StateId))
                ) && 
                (
                    this.StudentNumber == input.StudentNumber ||
                    (this.StudentNumber != null &&
                    this.StudentNumber.Equals(input.StudentNumber))
                ) && 
                (
                    this.UnweightedGpa == input.UnweightedGpa ||
                    (this.UnweightedGpa != null &&
                    this.UnweightedGpa.Equals(input.UnweightedGpa))
                ) && 
                (
                    this.WeightedGpa == input.WeightedGpa ||
                    (this.WeightedGpa != null &&
                    this.WeightedGpa.Equals(input.WeightedGpa))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Credentials != null)
                    hashCode = hashCode * 59 + this.Credentials.GetHashCode();
                if (this.Dob != null)
                    hashCode = hashCode * 59 + this.Dob.GetHashCode();
                if (this.EllStatus != null)
                    hashCode = hashCode * 59 + this.EllStatus.GetHashCode();
                if (this.Enrollments != null)
                    hashCode = hashCode * 59 + this.Enrollments.GetHashCode();
                if (this.Ext != null)
                    hashCode = hashCode * 59 + this.Ext.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.Grade != null)
                    hashCode = hashCode * 59 + this.Grade.GetHashCode();
                if (this.GraduationYear != null)
                    hashCode = hashCode * 59 + this.GraduationYear.GetHashCode();
                if (this.HispanicEthnicity != null)
                    hashCode = hashCode * 59 + this.HispanicEthnicity.GetHashCode();
                if (this.HomeLanguage != null)
                    hashCode = hashCode * 59 + this.HomeLanguage.GetHashCode();
                if (this.IepStatus != null)
                    hashCode = hashCode * 59 + this.IepStatus.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LegacyId != null)
                    hashCode = hashCode * 59 + this.LegacyId.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Race != null)
                    hashCode = hashCode * 59 + this.Race.GetHashCode();
                if (this.School != null)
                    hashCode = hashCode * 59 + this.School.GetHashCode();
                if (this.Schools != null)
                    hashCode = hashCode * 59 + this.Schools.GetHashCode();
                if (this.SisId != null)
                    hashCode = hashCode * 59 + this.SisId.GetHashCode();
                if (this.StateId != null)
                    hashCode = hashCode * 59 + this.StateId.GetHashCode();
                if (this.StudentNumber != null)
                    hashCode = hashCode * 59 + this.StudentNumber.GetHashCode();
                if (this.UnweightedGpa != null)
                    hashCode = hashCode * 59 + this.UnweightedGpa.GetHashCode();
                if (this.WeightedGpa != null)
                    hashCode = hashCode * 59 + this.WeightedGpa.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Dob (string) pattern
            Regex regexDob = new Regex(@"(?:[0-9]{1,2})\/([0-9]{1,2})\/([0-9]{4})", RegexOptions.CultureInvariant);
            if (false == regexDob.Match(this.Dob).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Dob, must match a pattern of " + regexDob, new [] { "Dob" });
            }

            yield break;
        }
    }

}
