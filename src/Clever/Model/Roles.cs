/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Clever.Client.SwaggerDateConverter;

namespace Clever.Model
{
    /// <summary>
    /// Roles
    /// </summary>
    [DataContract]
    public partial class Roles :  IEquatable<Roles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Roles" /> class.
        /// </summary>
        /// <param name="contact">contact.</param>
        /// <param name="districtAdmin">districtAdmin.</param>
        /// <param name="staff">staff.</param>
        /// <param name="student">student.</param>
        /// <param name="teacher">teacher.</param>
        public Roles(Contact contact = default(Contact), DistrictAdmin districtAdmin = default(DistrictAdmin), Staff staff = default(Staff), Student student = default(Student), Teacher teacher = default(Teacher))
        {
            this.Contact = contact;
            this.DistrictAdmin = districtAdmin;
            this.Staff = staff;
            this.Student = student;
            this.Teacher = teacher;
        }
        
        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Gets or Sets DistrictAdmin
        /// </summary>
        [DataMember(Name="district_admin", EmitDefaultValue=false)]
        public DistrictAdmin DistrictAdmin { get; set; }

        /// <summary>
        /// Gets or Sets Staff
        /// </summary>
        [DataMember(Name="staff", EmitDefaultValue=false)]
        public Staff Staff { get; set; }

        /// <summary>
        /// Gets or Sets Student
        /// </summary>
        [DataMember(Name="student", EmitDefaultValue=false)]
        public Student Student { get; set; }

        /// <summary>
        /// Gets or Sets Teacher
        /// </summary>
        [DataMember(Name="teacher", EmitDefaultValue=false)]
        public Teacher Teacher { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Roles {\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  DistrictAdmin: ").Append(DistrictAdmin).Append("\n");
            sb.Append("  Staff: ").Append(Staff).Append("\n");
            sb.Append("  Student: ").Append(Student).Append("\n");
            sb.Append("  Teacher: ").Append(Teacher).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Roles);
        }

        /// <summary>
        /// Returns true if Roles instances are equal
        /// </summary>
        /// <param name="input">Instance of Roles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Roles input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.DistrictAdmin == input.DistrictAdmin ||
                    (this.DistrictAdmin != null &&
                    this.DistrictAdmin.Equals(input.DistrictAdmin))
                ) && 
                (
                    this.Staff == input.Staff ||
                    (this.Staff != null &&
                    this.Staff.Equals(input.Staff))
                ) && 
                (
                    this.Student == input.Student ||
                    (this.Student != null &&
                    this.Student.Equals(input.Student))
                ) && 
                (
                    this.Teacher == input.Teacher ||
                    (this.Teacher != null &&
                    this.Teacher.Equals(input.Teacher))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.DistrictAdmin != null)
                    hashCode = hashCode * 59 + this.DistrictAdmin.GetHashCode();
                if (this.Staff != null)
                    hashCode = hashCode * 59 + this.Staff.GetHashCode();
                if (this.Student != null)
                    hashCode = hashCode * 59 + this.Student.GetHashCode();
                if (this.Teacher != null)
                    hashCode = hashCode * 59 + this.Teacher.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
