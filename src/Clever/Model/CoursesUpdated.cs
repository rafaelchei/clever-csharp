/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Clever.Client.SwaggerDateConverter;

namespace Clever.Model
{
    /// <summary>
    /// CoursesUpdated
    /// </summary>
    [DataContract]
    public partial class CoursesUpdated : Event,  IEquatable<CoursesUpdated>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoursesUpdated" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoursesUpdated() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoursesUpdated" /> class.
        /// </summary>
        /// <param name="data">data.</param>
        /// <param name="previousAttributes">previousAttributes.</param>
        public CoursesUpdated(CourseObject data = default(CourseObject), Object previousAttributes = default(Object), string created = default(string), string id = default(string), string type = "courses.updated") : base(created, id, type)
        {
            this.Data = data;
            this.PreviousAttributes = previousAttributes;
        }
        
        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public CourseObject Data { get; set; }

        /// <summary>
        /// Gets or Sets PreviousAttributes
        /// </summary>
        [DataMember(Name="previous_attributes", EmitDefaultValue=false)]
        public Object PreviousAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CoursesUpdated {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  PreviousAttributes: ").Append(PreviousAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CoursesUpdated);
        }

        /// <summary>
        /// Returns true if CoursesUpdated instances are equal
        /// </summary>
        /// <param name="input">Instance of CoursesUpdated to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoursesUpdated input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && base.Equals(input) && 
                (
                    this.PreviousAttributes == input.PreviousAttributes ||
                    (this.PreviousAttributes != null &&
                    this.PreviousAttributes.Equals(input.PreviousAttributes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.PreviousAttributes != null)
                    hashCode = hashCode * 59 + this.PreviousAttributes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
